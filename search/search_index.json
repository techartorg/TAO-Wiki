{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> Front page of the wiki \ud83d\ude0e</p> <p>instructions on where to start: maybe check out your favorite app?</p> <ul> <li>Unity</li> <li>Houdini</li> <li>3ds Max</li> <li>Maya</li> <li>blender</li> <li>Glossary-of-Terms</li> <li>Python3-Snippets</li> <li>Unreal</li> </ul>"},{"location":"3ds%20max/","title":"3ds max","text":"<p>a 3d app by autodesk</p>"},{"location":"3ds%20max/#backlinks","title":"Backlinks","text":"<ul> <li>index<ul> <li>3ds max</li> </ul> </li> </ul>"},{"location":"Graph%F0%9F%95%B8%EF%B8%8F/","title":"Graph\ud83d\udd78\ufe0f","text":"<p>use mouse scroll to zoom in/out, and hold left click while dragging to pan.</p>"},{"location":"blender/","title":"Blender","text":""},{"location":"blender/#backlinks","title":"Backlinks","text":"<ul> <li>index<ul> <li>blender</li> </ul> </li> </ul>"},{"location":"image/","title":"Image","text":""},{"location":"plugin/","title":"Plugin","text":"<p>this is related https://github.com/swar8080/obsidian-plugin-update-tracker</p> <p>obsidian plugin</p>"},{"location":"3ds%20Max/3ds%20Max/","title":"3ds Max","text":"<p>Pymxs helpful snippets</p>"},{"location":"3ds%20Max/3ds%20Max/#backlinks","title":"Backlinks","text":"<ul> <li>index<ul> <li>3ds Max</li> </ul> </li> </ul>"},{"location":"3ds%20Max/pymxs%20helpful%20snippets/","title":"Selection Sets:","text":""},{"location":"3ds%20Max/pymxs%20helpful%20snippets/#selection-sets","title":"Selection Sets:","text":"<p>Getting Named Selection Sets is a fairly straightforward procedure for Object Selection Sets, but it\u2019s a bit more \u201cdifficult\u201d to find how to do it for object mode ones (Vert/Edge/Faces etc), so to save the hassle Getting SelSets From object modes (verts/edges/poly/etc) This is the \u201csame\u201d just change whatever mode you\u2019re looking for</p> <ul> <li>Get Selection Set names from Faces Sets: <pre><code>import pymxs\nrt = pymxs.runtime\nthing = rt.getCurrentSelection()[0]\nprint(thing.Faces.selSetNames)\n#(\"TestSet\", \"TestSet2\") # example output\n</code></pre> Obviously then you can select a set by doing something like: <pre><code>thing.selectedFaces = thing.Faces[\"TestSet2\"]\n</code></pre></li> </ul>"},{"location":"3ds%20Max/pymxs%20helpful%20snippets/#get-all-materials","title":"Get All Materials","text":"<p>Does a check to see if you have multi material on your model, if it does, iterates and tries to do a face select to check if the material is actually on the model and returns a list of material ID\u2019s and what faces have it.  <pre><code>def get_all_mats(model):\n    materials = []\n    dupe = rt.copy(model)\n    rt.resetXForm(dupe)\n    rt.collapseStack(dupe)\n    material = dupe.material\n    if rt.classOf(material) == rt.Multimaterial:\n        for matID in xrange(material.numsubs):\n            #see if we can select any faces for each material\n            dupe.selectByMaterial(matID+1)\n            faces = dupe.GetSelection(rt.name(\"Face\"))\n            numSelected = faces.numberset\n            if numSelected &gt; 0:\n                materials.append({material[matID]: numSelected})\n    elif rt.classOf(material) == rt.StandardMaterial:\n        # if we only have one material we assume that it is on every face\n        materials.append({material.name: dupe.mesh.numFaces})\n    rt.delete(dupe)\n    return materials\n</code></pre></p>"},{"location":"3ds%20Max/pymxs%20helpful%20snippets/#ez-multi-import","title":"EZ Multi Import","text":"<p>Very small multi file importer script. Drives me nuts having to import multiple fbx\u2019s etc. <pre><code>from PySide2 import QtWidgets\nimport pymxs\nrt = pymxs.runtime\n\ndef main():\n    dialog = QtWidgets.QFileDialog()\n\n    files = dialog.getOpenFileNames(None, \"Multi Importer\", \"\", \"FBX (*.fbx);; OBJ (*.obj);; All Files (*.*)\")\n    for f in files[0]:\n        rt.importFile(f, rt.name(\"noPrompt\"))\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"3ds%20Max/pymxs%20helpful%20snippets/#get-all-children-define-specific-type-of-child-to-get","title":"Get all Children + define specific type of child to get","text":"<p>Provide a node as a parent to search down from and optionally give a node type in Max to search for such as Lights, Geometry, FFD\u2019s etc. Get back a list of the children  <pre><code>def get_all_children(parent, node_type=None):\n    \"\"\"Handy function to get all the children of a given node\n\n    Args:\n        parent (3dsmax Node1): node to get all children of\n        node_type (None, runtime.class): give class to check for\n                                         e.g. rt.FFDBox/rt.GeometryClass etc.\n\n    Returns:\n        list: list of all children of the parent node\n    \"\"\"\n    def list_children(node):\n        children = []\n        for c in node.Children:\n            children.append(c)\n            children = children + list_children(c)\n        return children\n    child_list = list_children(parent)\n\n    return ([x for x in child_list if rt.superClassOf(x) == node_type]\n            if node_type else child_list)\n</code></pre></p>"},{"location":"3ds%20Max/pymxs%20helpful%20snippets/#is-ancestor","title":"Is Ancestor","text":"<p>Check back up the tree from a node to see if a given named node is an ancestor <pre><code>def is_ancestor(node, name):\n    \"\"\"Given the node, is there an ancestor named \"name\"\n\n    Args:\n        node (max Node): node to check for an ancestor on\n        name (string): name of the ancestor to check for\n\n    Returns:\n        bool: True if the node is an ancestor\n    \"\"\"\n    found = False\n    top = False\n    curr_ancestor = node.parent\n    if curr_ancestor.name == name:\n        return True\n\n    while curr_ancestor.parent is not None:\n        curr_ancestor = curr_ancestor.parent\n        if curr_ancestor.name == name:\n            return True\n    return False\n</code></pre></p>"},{"location":"Houdini/Houdini-HDA-Naming-Conventions/","title":"Houdini HDA Naming Conventions","text":"<p>Back to Houdini</p> <p>The naming convention of .hda and .shelf are based on the SideFX versioning architecture as described here. http://www.sidefx.com/docs/houdini/assets/namespaces.html </p> <p>For a .hda and a .shelf there are four major names you need to know about:</p> <ul> <li>The filename on disk  - company.context__assetname__1.0.hda</li> <li>The operator name     - company::assetname::1.0</li> <li>The operator label    - Asset Name</li> <li>Tab submenu entry     - company\"collection\u201d Directory for HDAs &amp; Shelfs - $HOUDINI_PATH/otls $HOUDINI_PATH/toolbar</li> </ul> <p>The operator name convention is the most important. </p> <p>First is the namespace as identified by \u201ccompany\u201d in our case this represent the different studios. In some cases this could represent a codename of a project when a studio or group can not be identified at that time. This prevents libraries of hda from clashing when built at different studios. Also allowing external libraries to be used. You can even use this to define teams within the same project.</p> <p>Second is the assetname it is the non space, non camel case, lower case name of your tool. For the label this is First word capitalized space separated asset name. The label is the human readable version.</p> <p>Third is the major and minor version of your asset. The major version is a number that represent a significant non-backwards compatible change to the hda. If you rework the node 100% from scratch or change a significant function of the node you update the major number. A minor version is an additive process like an additional parameter or a bug fix would not over haul. It is important not to get this confused with source control. Edits and fixes are just check in and check out of the same .hda. If you have an .hda deployed in your system and you don\u2019t want to break everyones production tools this is a good reason to major or minor version control.</p> <p>The double colon :: is the separate buffer used only in the operator name. For the file on disk this gets converted to an underscore. In advanced pipeline you can use a modified http file structure to store assets based on this.</p> <p>The context in the file on disk is inherent in the operator name of the file so it does not need to be include. It is included in the file on disk name to separate .hdas based on their internal structures which are unique. Additionally you can share the same asset name of a file in different context. This helps in scripting and OPcustomize when you do not have to load up houdini to see the name of the .hda.</p> <p>It is important to store one .hda or one .shelf tool per a file. This allows multiple people to work on separate tools at a time. This is very important for source control.</p> <p>The tab submenu entry is how you organize your tools in the tab menu. You do not need to add extra modifiers to the asset name to compensate for this. Under the company name you can add an extra folder for any collection of tools like \u201cImport\u201d, \u201cEngine\u201d, \u201cTerrain\u201d etc. We do not put them into the regular submenu entries because we would not be able to find our own tools. If a asset name collides this submenu entry will be bracketed () to tell you the difference.</p> <p>Further when creating your asset libraries use a standard $HOUDINI_PATH folder structure don\u2019t be original. This allows us to append multiple studios and libraries tools together. Like the gameshelf. Place all .hda in /otls and shelfs in /toolbar etc. </p> <p>Additionally do not save your .hda in exploded mode via the hotl.exe. In production environments all these separated files can cause havoc when they get out of sync on disk. You can work with the .hda like this but compile them about before distribution in your studio.</p> <p>For an example of folder structure you can look here: https://github.com/LaidlawFX/LaidlawFX  https://github.com/sideeffects/GameDevelopmentToolset or within </p> <p>Back to Houdini</p>"},{"location":"Houdini/Houdini-HDA-Naming-Conventions/#backlinks","title":"Backlinks","text":"<ul> <li>Houdini<ul> <li>Houdini-HDA-Naming-Conventions without a SQL database.</li> </ul> </li> </ul>"},{"location":"Houdini/Houdini-Setting-up-a-studio-environment/","title":"Houdini Setting up a studio environment","text":"<p>Back to Houdini</p> <p>Houdini is a very easy software to modify and integrate with whatever pipeline you have. However, the big asterisk, and the reason for this documentation is there are easier paths than others to achieve these goals.</p> <p>Back to Houdini</p>"},{"location":"Houdini/Houdini-Setting-up-a-studio-environment/#backlinks","title":"Backlinks","text":"<ul> <li>Houdini<ul> <li>Houdini-Setting-up-a-studio-environment</li> </ul> </li> </ul>"},{"location":"Houdini/Houdini/","title":"Welcome to the TAO Houdini Page!","text":""},{"location":"Houdini/Houdini/#welcome-to-the-tao-houdini-page","title":"Welcome to the TAO Houdini Page!","text":"<p>These are current drops of wisdom transcribed from the fast moving current of the Slack flow. </p> <p>Don\u2019t get set into one form, adapt it and build your own, and let it grow, be like water. Empty your mind, be formless, shapeless \u2014 like water. Now you put water in a cup, it becomes the cup; You put water into a bottle it becomes the bottle; You put it in a teapot it becomes the teapot. Now water can flow or it can crash. Be water, my friend. -Bruce Lee</p> <p>Houdini Pipeline Docs</p> <ul> <li>Houdini-Setting-up-a-studio-environment</li> <li>Houdini-HDA-Naming-Conventions without a SQL database.</li> </ul>"},{"location":"Houdini/Houdini/#backlinks","title":"Backlinks","text":"<ul> <li>Houdini-HDA-Naming-Conventions<ul> <li>Back to Houdini</li> <li>Back to Houdini</li> </ul> </li> <li>Houdini-Setting-up-a-studio-environment<ul> <li>Back to Houdini</li> <li>Back to Houdini</li> </ul> </li> <li>index<ul> <li>Houdini</li> </ul> </li> </ul>"},{"location":"Maya/Maya/","title":"Maya","text":"<p>Page for Maya Snippets (Delete this when you add the first snippet)</p> <p>a cool resource</p> <p>i use this as a callback to do the thing.</p>"},{"location":"Maya/Maya/#backlinks","title":"Backlinks","text":"<ul> <li>index<ul> <li>Maya</li> </ul> </li> </ul>"},{"location":"Python/Console-Threaded-WIP-animation/","title":"Console Threaded WIP animation","text":"<p>Little class for programs that need a \u201cI\u2019m not frozen\u201d animation for console printing Has an animated character in the console like -&gt;    | / - \\ It should be noted that you use <code>cursor_anim.start()</code> to start it and <code>cursor_anim.stop(bool)</code> to stop it</p> <p>Do not use the run function to start it as it will just loop forever (and that is called by the <code>cursor_anim.start()</code></p> <p>Setup is like  <pre><code>cursor_anim = CursorAnimation()\ncursor_anim.wip_msg = \"Doing a thing that takes a while...\"\ncursor_anim.success_msg = \"Successfully did the long thing!\"\ncursor_anim.fail_msg = \"Failed to do the thing!\"\ncursor_anim.start()\n# do long code\n\n# after code is done or if code has failed\n# if True is passed in stop that means you've done it successfully \n# and the success_msg will be printed, else if False, the fail_msg\ncursor_anim.stop(True)\n</code></pre></p> <pre><code>import threading\nimport time\n\nclass CursorAnimation(threading.Thread):\n\n    \"\"\"Threaded class to provide an animation in the console while syncing different parts/Files\n\n    Attributes:\n        fail_msg (str): Message to print at the end when Stop is called with False\n        success_msg (str): Message to print at the end when Stop is called with True\n        wip_msg (str): Message to print while doing the task\n    \"\"\"\n\n    def __init__(self):\n        self.flag = True\n        self.animation_char = \"|/-\\\\\"\n        self.idx = 0\n        threading.Thread.__init__(self)\n        self.wip_msg = \"DOING STUFF\"\n        self.success_msg = \"DID THE THING!\"\n        self.fail_msg = \"WE DID NOT DO THE THING!\"\n        self.max_len = 0\n\n    def run(self):\n        self.max_len = len(max([self.wip_msg, self.success_msg, self.fail_msg], key=len)) + 1\n\n        #skip to a new line so we know we're not going to get wonky print animations\n        print(\"\\n\")\n        while self.flag:\n            print(\"{}{}\".format(self.wip_msg, self.animation_char[self.idx % len(self.animation_char)]).ljust(self.max_len, \" \"), end=\"\\r\")\n            self.idx += 1\n            time.sleep(0.1)\n\n    def stop(self, success):\n        \"\"\"success is a bool to trigger either success or fail message\n        \"\"\"\n        self.flag = False\n        if success:\n            print(\"{}\".format(self.success_msg.ljust(self.max_len, \" \")), end=\"\\r\")\n        else:\n            print(\"{}\".format(self.fail_msg.ljust(self.max_len, \" \")), end=\"\\r\")\n</code></pre>"},{"location":"Python/Console-Threaded-WIP-animation/#backlinks","title":"Backlinks","text":"<ul> <li>Python3 Snippets<ul> <li>Console-Threaded-WIP-animation</li> </ul> </li> </ul>"},{"location":"Python/Python3%20Snippets/","title":"Python3 Snippets","text":"<p>Any new Snippets should be added below as a link to the snippet</p> <ul> <li>[[[Python]-Py3-Find-latest-installed-program-on-system]]</li> <li>[[[Python]-Py3-Extract-icon-from-exe-and-save-as-png-(with-alpha)]]</li> <li>Console-Threaded-WIP-animation</li> </ul>"},{"location":"Python/Python3%20Snippets/#backlinks","title":"Backlinks","text":"<ul> <li>index<ul> <li>Python3 Snippets</li> </ul> </li> </ul>"},{"location":"Python/%5BPython%5D-Py3-Extract-icon-from-exe-and-save-as-png-%28with-alpha%29/","title":"[Python] Py3 Extract icon from exe and save as png (with alpha)","text":"<pre><code>!#python3\ndef extract_icon_from_exe(icon_in_path, icon_name, icon_out_path, out_width = 56, out_height = 56):\n\n    \"\"\"Given an icon path (exe file) extract it and output at the desired width/height as a png image.\n\n    Args:\n        icon_in_path (string): path to the exe to extract the icon from\n        icon_name (string): name of the icon so we can save it out with the correct name\n        icon_out_path (string): final destination (FOLDER) - Gets combined with icon_name for full icon_path\n        out_width (int, optional): desired icon width\n        out_height (int, optional): desired icon height\n\n    Returns:\n        string: path to the final icon\n    \"\"\"\n    import win32ui\n    import win32gui\n    import win32con\n    import win32api\n    from PIL import Image\n\n    ico_x = win32api.GetSystemMetrics(win32con.SM_CXICON)\n    ico_y = win32api.GetSystemMetrics(win32con.SM_CYICON)\n\n    large, small = win32gui.ExtractIconEx(icon_in_path,0)\n    win32gui.DestroyIcon(small[0])\n\n    hdc = win32ui.CreateDCFromHandle( win32gui.GetDC(0) )\n    hbmp = win32ui.CreateBitmap()\n    hbmp.CreateCompatibleBitmap( hdc, ico_x, ico_x )\n    hdc = hdc.CreateCompatibleDC()\n\n    hdc.SelectObject( hbmp )\n    hdc.DrawIcon( (0,0), large[0] )\n\n    bmpstr = hbmp.GetBitmapBits(True)\n    icon = Image.frombuffer(\n        'RGBA',\n        (32,32),\n        bmpstr, 'raw', 'BGRA', 0, 1\n    )\n\n    full_outpath = os.path.join(icon_out_path, \"{}.png\".format(icon_name))\n    icon.resize((out_width, out_height))\n    icon.save(full_outpath)\n    #return the final path to the image\n    return full_outpath\n</code></pre>"},{"location":"Python/%5BPython%5D-Py3-Extract-icon-from-exe-and-save-as-png-%28with-alpha%29/#backlinks","title":"Backlinks","text":"<ul> <li>Python3 Snippets<ul> <li>[[[Python]-Py3-Extract-icon-from-exe-and-save-as-png-(with-alpha)]]</li> </ul> </li> </ul>"},{"location":"Python/%5BPython%5D-Py3-Find-latest-installed-program-on-system/","title":"[Python] Py3 Find latest installed program on system","text":"<pre><code>#!python3\nimport winreg\ndef latest_installed_program(software_name, search_64_first=True, first_call = True):\n    \"\"\"Try to find the latest installed version of a specified program on the system\n\n    Args:\n        software_name (string): name of the software to look for (3ds Max, Autodesk Maya etc.)\n\n        search_64_first (int): where to check first, if you know it's going to be  winreg.KEY_WOW64_32KEY then put \n\n        first_call (bool): Don't set this manually.\n    Returns:\n        dictionary: dictionary with the latest program info in it.\n\n    Example usage:\n    latest_installed_program(\"3ds Max\", True )\n    \"\"\"\n    win_flag = None\n    if search_64_first:\n        win_flag = winreg.KEY_WOW64_64KEY \n    else:\n        win_flag = winreg.KEY_WOW64_32KEY\n\n    hive=winreg.HKEY_LOCAL_MACHINE\n\n    aReg = winreg.ConnectRegistry(None, hive)\n    icons = r\"HKEY_CLASSES_ROOT\\Installer\\Products\\\"\"\n    aKey = winreg.OpenKey(aReg, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\",\n                          0, winreg.KEY_READ | win_flag)\n\n    count_subkey = winreg.QueryInfoKey(aKey)[0]\n    #way to make it so we don't infinite loop\n\n    latest_version = {}\n    latest_version[\"version\"] = 0\n\n    for i in range(count_subkey):\n        software = {}\n        try:\n            asubkey_name = winreg.EnumKey(aKey, i)\n            asubkey = winreg.OpenKey(aKey, asubkey_name)\n            name = winreg.QueryValueEx(asubkey, \"DisplayName\")[0]\n            if software_name.lower() in name.lower():\n                software['name'] = name\n                try:\n                    software['version'] = winreg.QueryValueEx(asubkey, \"DisplayVersion\")[0]\n                except EnvironmentError:\n                    software['version'] = 'undefined'\n                try:\n                    software['publisher'] = winreg.QueryValueEx(asubkey, \"Publisher\")[0]\n                except EnvironmentError:\n                    software['publisher'] = 'undefined'\n                try:\n                    software['path'] = \"{}\".format(winreg.QueryValueEx(asubkey, \"InstallLocation\")[0])\n                except EnvironmentError:\n                    software['path'] = 'undefined'\n\n                if software[\"version\"] &gt; str(latest_version[\"version\"]) or latest_version[\"version\"] == 0:\n                    latest_version = software\n\n        except EnvironmentError:\n            continue\n    #search the other flag\n    if search_64_first:\n        search_64_first = False\n    else:\n        search_64_first = True\n\n    if first_call and latest_version[\"version\"] == 0:\n        latest_version = latest_installed_program(software_name, search_64_first, False)\n\n    return latest_version\n\n\nlatest_installed_program(\"Autodesk Maya\")\nlatest_installed_program(\"3ds Max\")\nlatest_installed_program(\"Photoshop\")\n\n\n\"\"\"\nreturns\n#3ds Max {'version': '20.4.0.4254', 'publisher': 'Autodesk', 'path': 'C:\\\\Program Files\\\\Autodesk\\\\3ds Max 2018\\\\', 'name': 'Autodesk 3ds Max 2018'}\nAutodesk Maya {'version': '18.0.0.5870', 'publisher': 'Autodesk', 'path': 'D:\\\\Program Files\\\\Autodesk\\\\Maya2018\\\\', 'name': 'Autodesk Maya 2018'}\nPhotoshop {'version': '20.0.1', 'publisher': 'Adobe Systems Incorporated', 'path': 'C:\\\\Program Files\\\\Adobe\\\\Adobe Photoshop CC 2019', 'name': 'Adobe Photoshop CC 2019'}\n\"\"\"\n</code></pre>"},{"location":"Python/%5BPython%5D-Py3-Find-latest-installed-program-on-system/#backlinks","title":"Backlinks","text":"<ul> <li>Python3 Snippets<ul> <li>[[[Python]-Py3-Find-latest-installed-program-on-system]]</li> </ul> </li> </ul>"},{"location":"Qt/Tickable%20PySide2%20Window%20BaseClass/","title":"Tickable PySide2 Window BaseClass","text":"<p>Using the below baseclass, You can have a tickable window for PySide2 UI To subscribe to the tick, it should be something like <pre><code>self.sig_tick.connect(self.my_func)\n</code></pre></p>"},{"location":"Qt/Tickable%20PySide2%20Window%20BaseClass/#base-class","title":"BASE CLASS","text":"<pre><code>import unreal\nfrom PySide2 import QtWidgets\nfrom PySide2.QtCore import Signal\n\nclass QtUE_Window(QtWidgets.QMainWindow):\n    # Signal that can be conneted to for tick functionality\n    sig_tick = Signal(float)\n    def __init__(self, parent=None):\n        super(QtUE_Window, self).__init__(parent)\n        self.tick_handle = unreal.register_slate_post_tick_callback(self.__QtAppTick__)\n\n    def __QtAppTick__(self, delta_seconds):\n        # This function will receive the tick from Unreal\n        QtWidgets.QApplication.processEvents()\n        self.sig_tick.emit(delta_seconds)\n\n    def __QtAppQuit__(self):\n        # This function will be called when the application is closing.\n        unreal.unregister_slate_post_tick_callback(self.tick_handle)\n\n    def closeEvent(self, event):\n        super(QtUE_Window, self).closeEvent(event)\n        self.__QtAppQuit__()\n</code></pre>"},{"location":"Qt/Tickable%20PySide2%20Window%20BaseClass/#backlinks","title":"Backlinks","text":"<ul> <li>Unreal<ul> <li>Tickable PySide2 Window BaseClass</li> </ul> </li> </ul>"},{"location":"Unity/Drop-Selected-Model-To-Ground%28or-closest-model-below%29-%28No-Colliders-Needed%29/","title":"Drop Selected Model To Ground(or closest model below) (No Colliders Needed)","text":"<p>Editor Script/Menu Item - Put in script in Editor Folder. Allows for a single selected object to be dropped to the next nearest model below it.  Model that is dropped to ground is dropped to the pivot (something to note if your pivots are center of model etc) <pre><code>using System.Collections.Generic;\nusing System.Linq;\nusing Luna;\nusing UnityEditor;\nusing UnityEngine;\n\npublic class EditorMenuItems : MonoBehaviour\n{\n        [MenuItem(\"GameObject/Set Object On Ground - No Collider #G\", false, 10)]\n        private static void SetObjectOnGround()\n        {\n            GameObject selection  = Selection.activeGameObject;\n            Transform[] allObjects = UnityEngine.Object.FindObjectsOfType&lt;Transform&gt;() ;\n            //Try to find the objects that are closest to the current GO\n            IEnumerable&lt;Transform&gt; closeObjects = allObjects.Where(o =&gt;  o.position.y &lt; selection.transform.position.y \n                                                     &amp;&amp; o.gameObject != selection.gameObject\n                                                     &amp;&amp; o.GetComponent&lt;MeshRenderer&gt;() \n                                                     &amp;&amp; PointContainedIn2DPlane(selection.transform.position, o.GetComponent&lt;MeshRenderer&gt;().bounds));\n\n            Vector3 hitPoint = Vector3.zero;\n            float closestDist = 10000;\n            foreach (Transform closeObject in closeObjects)\n            {\n                RaycastHit hit = new RaycastHit();\n                bool bHit = HandleUtilityWrapper.IntersectRayMesh(new Ray(selection.transform.position, Vector3.down), closeObject.GetComponent&lt;MeshFilter&gt;(), out hit);\n                if (!bHit)\n                {\n                    continue;\n                }\n                if (hit.distance &lt; closestDist)\n                {\n                    // Debug.Log($\"Updating Closest: {closeObject.name} dist:{hit.distance}\");\n                    hitPoint = hit.point;\n                    closestDist = hit.distance;\n                }\n            }\n\n            Vector3 position = selection.transform.position;\n            position = new Vector3(position.x, hitPoint.y, position.z);\n            selection.transform.position = position;\n        }\n\n        private static bool PointContainedIn2DPlane(Vector3 point, Bounds bounds)\n        {\n            if ((point.x &gt; bounds.min.x &amp;&amp; point.x &lt; bounds.max.x) &amp;&amp; (point.z &gt; bounds.min.z &amp;&amp; point.z &lt; bounds.max.z))\n            {\n                return true;\n            }\n\n            return false;\n        }\n}\n</code></pre></p> <p>Class that opens access to mesh ray casting (Code adapted from Gist) <pre><code>using System;\nusing System.Reflection;\nusing UnityEngine;\nusing UnityEditor;\nusing System.Linq;\n&amp;emsp;\n// Allows for access to Unity function that they haven't made public (through reflection)\n// Makes it so we can do mesh raycasting (no colliders)\n[InitializeOnLoad]\n    public static class HandleUtilityWrapper\n    {\n        private static readonly Type       HandleUtility;\n        private static readonly MethodInfo IntersectRayMeshMethodInfo;\n&amp;emsp;\n        static HandleUtilityWrapper()\n        {\n            var editorTypes = typeof(Editor).Assembly.GetTypes();\n            HandleUtility              = editorTypes.FirstOrDefault(t =&gt; t.Name == \"HandleUtility\");\n            IntersectRayMeshMethodInfo = HandleUtility.GetMethod(\"IntersectRayMesh\", BindingFlags.Static | BindingFlags.NonPublic);\n        }\n&amp;emsp;\n        public static bool IntersectRayMesh(Ray ray, MeshFilter meshFilter, out RaycastHit hit)\n        {\n            return IntersectRayMesh(ray, meshFilter.sharedMesh, meshFilter.transform.localToWorldMatrix, out hit);\n        }\n&amp;emsp;\n        private static object[] _parms = new object[4];\n&amp;emsp;\n        public static bool IntersectRayMesh(Ray ray, Mesh mesh, Matrix4x4 matrix, out RaycastHit hit)\n        {\n            _parms[0] = ray;\n            _parms[1] = mesh;\n            _parms[2] = matrix;\n            _parms[3] = null;\n&amp;emsp;\n            var result = (bool) IntersectRayMeshMethodInfo.Invoke(null, _parms);\n            hit = (RaycastHit) _parms[3];\n            return result;\n        }\n    }\n&amp;emsp;\n</code></pre></p>"},{"location":"Unity/Drop-Selected-Model-To-Ground%28or-closest-model-below%29-%28No-Colliders-Needed%29/#backlinks","title":"Backlinks","text":"<ul> <li>Unity<ul> <li>Drop-Selected-Model-To-Ground(or-closest-model-below)-(No-Colliders-Needed)</li> </ul> </li> </ul>"},{"location":"Unity/Unity/","title":"Unity","text":"<ul> <li>Drop-Selected-Model-To-Ground(or-closest-model-below)-(No-Colliders-Needed)</li> </ul>"},{"location":"Unity/Unity/#backlinks","title":"Backlinks","text":"<ul> <li>index<ul> <li>Unity</li> </ul> </li> </ul>"},{"location":"Unreal/How%20to%20make%20an%20actor%20that%20can%20Tick%20In%20Unreal%20Editor/","title":"How to make an actor that can Tick In Unreal Editor","text":""},{"location":"Unreal/How%20to%20make%20an%20actor%20that%20can%20Tick%20In%20Unreal%20Editor/#why-not-use-an-editor-utility-actor","title":"Why not use an Editor Utility Actor?","text":"<p>Editor Utility Actors don\u2019t quite get you the exact functionality that seems useful enough for ticking in the editor via an actor. It will tick in the preview windows of blueprint and potentially lead to lots of head scratching as you realize that the blueprint you were working on is logging when you are trying to use it in other places. Also, there are times where you actually do want the same actor runtime as well (It\u2019s rare but totally a valid case).</p>"},{"location":"Unreal/How%20to%20make%20an%20actor%20that%20can%20Tick%20In%20Unreal%20Editor/#the-solve-make-your-own-actor-class","title":"The Solve.. Make your own actor class!","text":"<p>In your custom actor class you can use this to add a bool that toggles being able to tick in the editor. This way whenever you need this you can just simply check it on and get going. It also is separated so that you can have different logic happen in the editor vs in-game. Most of the time I end up with 1-1 anyway but its nice to have the option. </p> <p>header file <pre><code>/** Allows Tick To happen in the editor viewport*/\nvirtual bool ShouldTickIfViewportsOnly() const override;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere)\nbool UseEditorTick = false;\n\n/** Tick that runs ONLY in the editor viewport.*/\nUFUNCTION(BlueprintImplementableEvent, CallInEditor, Category = \"Events\")\nvoid BlueprintEditorTick(float DeltaTime);\n</code></pre></p> <p>cpp file <pre><code>// Separated Tick functionality and making sure that it truly can only happen in the editor. Might be a bit overkill but you can easily consolidate if you'd like. \nvoid YourActor::Tick(float DeltaTime)\n{\n    if (GetWorld() != nullptr &amp;&amp; GetWorld()-&gt;WorldType == EWorldType::Editor)\n    {\n#if WITH_EDITOR\n        BlueprintEditorTick(DeltaTime);\n#endif\n    }\n    else\n    {\n        Super::Tick(DeltaTime);\n    }\n}\n\n// This ultimately is what controls whether or not it can even tick at all in the editor view port. But, it is EVERY view port so it still needs to be blocked from preview windows and junk.\nbool YourActor::ShouldTickIfViewportsOnly() const\n{\n    if (GetWorld() != nullptr &amp;&amp; GetWorld()-&gt;WorldType == EWorldType::Editor &amp;&amp; UseEditorTick)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n</code></pre></p> <p>Then when you are done you should be able to add the new BlueprintEditorTick to your event graph and get rolling!</p>"},{"location":"Unreal/How%20to%20make%20an%20actor%20that%20can%20Tick%20In%20Unreal%20Editor/#final-notes","title":"Final Notes","text":"<p>This is pretty dangerous if you aren\u2019t mindful with what nodes you use in here.  Try not to do things like Add Component or any other nodes that would spawn objects into the world or if you do make sure you store them and clean them up.  Delays might work but they could be a bit odd as well. Just be aware that it can be fragile at times so make sure to give unreal some cake beforehand\u2026 \u2764\ufe0f </p>"},{"location":"Unreal/How%20to%20make%20an%20actor%20that%20can%20Tick%20In%20Unreal%20Editor/#backlinks","title":"Backlinks","text":"<ul> <li>Unreal<ul> <li>How to make an actor that can Tick In Unreal Editor</li> </ul> </li> </ul>"},{"location":"Unreal/Unreal/","title":"Unreal","text":""},{"location":"Unreal/Unreal/#reading-the-official-python-api-docs","title":"Reading the official Python API docs","text":"<p>For Python in Unreal start with the official docs, e.g. to get all actors in Unreal:</p> <ul> <li>I can use the EditorLevelLibrary docs</li> <li>The docs tell me that the <code>get_all_level_actors()</code> method returns an array of Actors. So I go check out the docs for Actor.</li> <li>The docs for Actor show I can run a <code>get_name()</code> method <pre><code>import unreal\nactors = unreal.EditorLevelLibrary.get_all_level_actors()\nactor_names = [x.get_name() for x in actors]\n</code></pre> It\u2019s recommended to start experimenting line by line, in the Unreal Python console, and just print the results.</li> </ul>"},{"location":"Unreal/Unreal/#other","title":"Other","text":"<ul> <li>A great resource for Unreal Python scripts, tips &amp; tricks: https://unrealcommunity.wiki/</li> <li>How to make an actor that can Tick In Unreal Editor</li> <li>Tickable PySide2 Window BaseClass</li> </ul>"},{"location":"Unreal/Unreal/#backlinks","title":"Backlinks","text":"<ul> <li>index<ul> <li>Unreal</li> </ul> </li> </ul>"},{"location":"folder1/MultiMarkdown/","title":"MultiMarkdown","text":"<p>In order to create valid HTML, you need properly coded syntax that can be cumbersome for  \u201cnon-programmers\u201d to write. Sometimes, you just want to easily make certain words bold, and certain  words italicized without having to remember the  syntax. Additionally, for example, creating lists:</p> <ul> <li>should be easy</li> <li>should not involve programming</li> </ul> <p>MultiMarkdown</p>"},{"location":"folder1/tags/","title":"Tags","text":"<p>above is mkdoc tags <pre><code>---\ntags:\n\n  - hashtag1\n  - hashtag2\n---\n</code></pre></p> <p>here is a obsidian tag</p> <p>hashtag1</p> <p><code>#hashtag1</code></p> <p>Following is a list of relevant tags: based on mkdoc tags tags.md (this page) is excluded from this list</p> <p>[TAGS]</p>","tags":["hashtag1","hashtag2"]},{"location":"folder1/test1/","title":"Test1","text":"<p>test1b <code>[[test1b]]</code></p> <p>test1b <code>[test1b](test1b)</code></p> <p>test1c <code>[[test1c]]</code> broken link</p> <p>test2 <code>[[test2]]</code></p> <p>hashtag1</p> <p>wiki</p>"},{"location":"folder1/test1b/","title":"Test1b","text":"<p>test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 </p> <p>test content 1 test content 1 </p> <p>test content 1 sdfvsd</p> <p>test content 1 </p> <p>hashtag</p>"},{"location":"folder1/test_tag/","title":"Test tag","text":"<p>test</p>","tags":["hashtag1","hashtag2"]},{"location":"folder1/%F0%9F%94%90lock/","title":"\ud83d\udd10lock","text":""},{"location":"folder1/%F0%9F%94%90lock/#test","title":"test","text":""},{"location":"folder1/%F0%9F%94%90lock/#password-secret","title":"password: secret","text":""},{"location":"folder22/test2/","title":"Test2","text":"<p>test1</p> <p>wiki</p> test collapse"},{"location":"glossary-of-terms/API%20%28Application%20Programming%20Interface%29/","title":"API (Application Programming Interface)","text":"<p>Very happy in Frenchglish</p>"},{"location":"glossary-of-terms/API%20%28Application%20Programming%20Interface%29/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>API (Application Programming Interface)</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Barycentric%20Coordinates/","title":"Barycentric Coordinates","text":"<p>This is when Bary loses his way home after a drink and can\u2019t seem to find his way back.</p>"},{"location":"glossary-of-terms/Barycentric%20Coordinates/#typical-use","title":"Typical use","text":"<p>Barycentric Coordinates, as typically used in the industry, is a 2 components coordinate system that defines a position within a triangle. They are often returned as results of intersection operation on mesh or triangles, or for interpolation purposes.</p>"},{"location":"glossary-of-terms/Barycentric%20Coordinates/#the-boring-stuff","title":"The boring stuff","text":"<p>Let <code>T</code> be a triangle defined by it\u2019s points <code>P0</code>, <code>P1</code> and <code>P2</code> The barycentric coordinates <code>U</code> and <code>V</code> defines a unique position <code>X</code> within that triangle with:  </p> <p><code>X = P0*W + P1*U + P2*V</code> where <code>W = 1-U-V</code> </p> <p>or  </p> <p><code>X = P0 + (P1-P0)*U + (P2-P0)*V</code></p>"},{"location":"glossary-of-terms/Barycentric%20Coordinates/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Barycentric Coordinates</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Blob%20Detection/","title":"Blob Detection","text":"<p>When you know you are about to spend the next week on the couch</p>"},{"location":"glossary-of-terms/Blob%20Detection/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Blob Detection</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/CPU-%20or%20GPU-Bound/","title":"CPU  or GPU Bound","text":"<p>When you just can\u2019t fall out of love with your phone\u2019s processors</p>"},{"location":"glossary-of-terms/CPU-%20or%20GPU-Bound/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>CPU- or GPU-Bound</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Callback/","title":"Callback","text":"<p>This is when you really like that person who gave you their number</p>"},{"location":"glossary-of-terms/Callback/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Callback</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Cascade%20Pose%20Regression/","title":"Cascade Pose Regression","text":"<p>This is when you are riding a sweet wave and you keep in making the same cool pose</p>"},{"location":"glossary-of-terms/Cascade%20Pose%20Regression/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Cascade Pose Regression</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Compute%20Shaders/","title":"Compute Shaders","text":"<p>This is when you tell a shader very sternly to use a calculator.</p>"},{"location":"glossary-of-terms/Compute%20Shaders/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Compute Shaders</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Convolve/","title":"Convolve","text":"<p>This is when you involve yourself very deeply and passionately with a cone</p>"},{"location":"glossary-of-terms/Convolve/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Convolve</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Distance%20Field/","title":"Distance Field","text":"<p>This is when you really hit it out of the park during your kid\u2019s little league game (even though you shouldn\u2019t even be playing\u2026)</p>"},{"location":"glossary-of-terms/Distance%20Field/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Distance Field</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Event%20Listener/","title":"Event Listener","text":"<p>This is when it\u2019s hard to listen to another person at a concert so you hold up your phone to each other\u2019s mouth, hit record, and play back what you each said to one another. </p>"},{"location":"glossary-of-terms/Event%20Listener/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Event Listener</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Foveation/","title":"Foveation","text":"<p>When you really just wanna render the center of your view</p>"},{"location":"glossary-of-terms/Foveation/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Foveation</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Geometry%20Shaders/","title":"Geometry Shaders","text":"<p>This is when you geometry gets really fed up with how you are dressing him and takes matters into his own hands</p>"},{"location":"glossary-of-terms/Geometry%20Shaders/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Geometry Shaders</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/","title":"Glossary of Terms","text":"<p>There are many definitions for technical artist-related terms available at the VES Glossary.  If you can\u2019t find the term you are looking for there, check our pages below. </p> <p>This page is under construction. Please contribute to it if you know the definition to these terms, or see anything that needs correcting.</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#list-of-technical-art-terms","title":"List of Technical Art Terms","text":"<p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#a","title":"A","text":"<p>API (Application Programming Interface)</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#b","title":"B","text":"<p>Barycentric Coordinates</p> <p>Blob Detection</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#c","title":"C","text":"<p>Callback</p> <p>Cascade Pose Regression</p> <p>Compute Shaders</p> <p>Convolve</p> <p>CPU- or GPU-Bound</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#d","title":"D","text":"<p>Distance Field</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#e","title":"E","text":"<p>Event Listener</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#f","title":"F","text":"<p>Foveation</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#g","title":"G","text":"<p>Geometry Shaders</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#h","title":"H","text":"<p>Hysteresis</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#i","title":"I","text":""},{"location":"glossary-of-terms/Glossary%20of%20Terms/#j","title":"J","text":""},{"location":"glossary-of-terms/Glossary%20of%20Terms/#k","title":"K","text":""},{"location":"glossary-of-terms/Glossary%20of%20Terms/#l","title":"L","text":"<p>Laplace Operator</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#m","title":"M","text":"<p>MaterialX</p> <p>Microservice</p> <p>Migration Path</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#n","title":"N","text":""},{"location":"glossary-of-terms/Glossary%20of%20Terms/#o","title":"O","text":"<p>Optical Flow</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#p","title":"P","text":"<p>Package Server</p> <p>Parse</p> <p>Prim</p> <p>Plates (Facial-Capture Animation)</p> <p>Proc Hours</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#q","title":"Q","text":"<p>Quantized Mesh</p> <p>Quantized Quaternion</p> <p>Qt</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#r","title":"R","text":"<p>Radial Sorting</p> <p>Raymarching</p> <p>Relaxed Cone Mapping</p> <p>ROMs (Range of Motion)</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#s","title":"S","text":"<p>Serialization</p> <p>Shadow Cache</p> <p>Smoke Testing</p> <p>Sparse Volume</p> <p>Spatializing</p> <p>Spherical Harmonics</p> <p>Surface Shader</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#t","title":"T","text":"<p>Texture Array</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#u","title":"U","text":"<p>Unit Testing</p> <p>uRPC</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#v","title":"V","text":"<p>VATs (Vertex Animation Textures)</p> <p>Vertex Stream</p> <p>Virtual Function</p> <p>Virtual Texture</p>"},{"location":"glossary-of-terms/Glossary%20of%20Terms/#w","title":"W","text":""},{"location":"glossary-of-terms/Glossary%20of%20Terms/#x","title":"X","text":""},{"location":"glossary-of-terms/Glossary%20of%20Terms/#y","title":"Y","text":""},{"location":"glossary-of-terms/Glossary%20of%20Terms/#z","title":"Z","text":""},{"location":"glossary-of-terms/Hysteresis/","title":"Hysteresis","text":"<p>When you are hysterical for a long time after a good joke</p>"},{"location":"glossary-of-terms/Hysteresis/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Hysteresis</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Laplace%20Operator/","title":"Laplace Operator","text":"<p>This is when you decide to take him/her/they back to your place but you decide it\u2019s Spanish (si si)</p>"},{"location":"glossary-of-terms/Laplace%20Operator/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Laplace Operator</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/MaterialX/","title":"MaterialX","text":"<p>This is when a material gains the ability to see into other people\u2019s thoughts</p>"},{"location":"glossary-of-terms/MaterialX/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>MaterialX</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Microservice/","title":"Microservice","text":"<p>This is when you decide to open up a restaurant in your microwave</p>"},{"location":"glossary-of-terms/Microservice/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Microservice</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Migration%20Path/","title":"Migration Path","text":"<p>Just follow the birds</p>"},{"location":"glossary-of-terms/Migration%20Path/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Migration Path</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Optical%20Flow/","title":"Optical Flow","text":"<p>This is what happens when you have one too many gin &amp; tonics and you can\u2019t stop staring at that guy dancing</p>"},{"location":"glossary-of-terms/Optical%20Flow/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Optical Flow</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Package%20Server/","title":"Package Server","text":"<p>Your Amazon driver</p>"},{"location":"glossary-of-terms/Package%20Server/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Package Server</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Paired%20Blend%20Node/","title":"Paired Blend Node","text":"<p>This is what you use to tie yourself together with your partner so that you can start dressing in the same exact outfits.</p>"},{"location":"glossary-of-terms/Parse/","title":"Parse","text":"<p>A combination of partying but very tersely</p>"},{"location":"glossary-of-terms/Parse/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Parse</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Plates%20%28Facial-Capture%20Animation%29/","title":"Plates (Facial Capture Animation)","text":"<p>This is when you make a facial animation of someone balancing plates on their chin</p>"},{"location":"glossary-of-terms/Plates%20%28Facial-Capture%20Animation%29/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Plates (Facial-Capture Animation)</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Prim/","title":"Prim","text":"<p>And proper</p>"},{"location":"glossary-of-terms/Prim/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Prim</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Proc%20Hours/","title":"Proc Hours","text":"<p>Not sure if I wrote or heard this term correct &gt;.&gt;</p>"},{"location":"glossary-of-terms/Proc%20Hours/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Proc Hours</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Qt/","title":"Qt","text":"<p>Slang for a cute person</p>"},{"location":"glossary-of-terms/Qt/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Qt</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Quantized%20Mesh/","title":"Quantized Mesh","text":"<p>This is when you mesh leaps into Quantum Space</p>"},{"location":"glossary-of-terms/Quantized%20Mesh/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Quantized Mesh</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Quantized%20Quaternion/","title":"Quantized Quaternion","text":"<p>This is when there is a tasty quater-ion and you only have so much of it.</p>  <p>Quantization = reducing the number of bits used by a number. A quantized quaternion is a quaternion that has its components quantized to take up less space in memory, typically to reduce network bandwidth or the size of animation data stored on disk or in memory.</p> <p>Normally quaternions are stored as 32-bit floating point numbers but this precision is not always needed. Since all components of a normalized (rotation-only) quaternion can only be in the -1..1 range, it is possible to take each component and move them for example to the 0..255 range through addition and multiplication, and then round them to an integer value, losing the decimal digits, which allows each component to only take a single byte. This lets the quaternion take 4 bytes total, instead of the original 16 bytes, at the cost of significantly reduced accuracy. A different compromise would be to use 16 bits per component (or 64 bits/8 bytes total) converting each value to the 0..65535 range. It is also possible to use a number of bits that is not a multiple of 8, as well as a different number of bits per component.</p>"},{"location":"glossary-of-terms/Quantized%20Quaternion/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Quantized Quaternion</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/ROMs%20%28Range%20of%20Motion%29/","title":"ROMs (Range of Motion)","text":"<p>This is what you definitely did not use ZSnes to play in the early 00\u2019s</p>"},{"location":"glossary-of-terms/ROMs%20%28Range%20of%20Motion%29/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>ROMs (Range of Motion)</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Radial%20Sorting/","title":"Radial Sorting","text":"<p>This is when you categorize folks based on the size of their badunkadunk</p>"},{"location":"glossary-of-terms/Radial%20Sorting/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Radial Sorting</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Raymarching/","title":"Raymarching","text":"<p>This is when you first boyfriend gets really mad and storms out</p>"},{"location":"glossary-of-terms/Raymarching/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Raymarching</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Relaxed%20Cone%20Mapping/","title":"Relaxed Cone Mapping","text":"<p>This is when you use your ice cream cone to make different patterns on the sidewalk because the heat is making you tired</p>"},{"location":"glossary-of-terms/Relaxed%20Cone%20Mapping/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Relaxed Cone Mapping</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Serialization/","title":"Serialization","text":"<p>It\u2019s when you pour more cereal into milk that has already had cereal in it, then pour ever more milk</p>  <p>Serialization is the act of converting various types of data into a stream of bytes, allowing it to be stored or transferred more easily.</p> <p>There are many different types of serialization for different use cases:</p>"},{"location":"glossary-of-terms/Serialization/#text-based-vs-binary","title":"Text-based vs binary","text":"<p>Text-based serialization is intended to be easier to inspect. Usually this means encoding text and numbers in their human-readable forms.</p>"},{"location":"glossary-of-terms/Serialization/#direct-vs-compressed","title":"Direct vs compressed","text":"<p>Serialization can utilize various forms of compression, which generally means one or more of:</p> <ul> <li>replacing duplicates of frequently repeated data with shorter sequences referring to the data<ul> <li>note that many game engines also do this step at the archive file level in the form of LZ-style compression, which would make it redundant to do the same thing at the file level as well</li> </ul> </li> <li>using variable-length encodings with the assumption that smaller values will be more common and should therefore take less space</li> </ul> <p>In this context, \u201cdirect\u201d simply means that the value was saved as-is, without additional transformations to make it take less space.</p>"},{"location":"glossary-of-terms/Serialization/#ordered-vs-schema-based-vs-mapped","title":"Ordered vs schema-based vs mapped","text":"<p>Ordered serialization simply writes all elements in the order they were given to the output byte stream. This generally requires knowing how the serialization was done to unserialize the data.</p> <p>Schema-based serialization formalizes the knowledge in an external definition file, allowing serialization and unserialization to agree on the contents of the data.</p> <p>Mapped serialization encodes data using key-value maps, with the intention that the elements may be accessed in a different order.</p>"},{"location":"glossary-of-terms/Serialization/#command-stream-vs-offset-based-subcomponents-if-structures-need-to-refer-to-other-structures","title":"Command-stream vs offset-based subcomponents (if structures need to refer to other structures)","text":"<p>Command-stream serialization most commonly defines the start and end (if necessary) of structures, effectively nesting them in the generated bytes. Example: JSON (using <code>[</code> to specify the beginning of an array and <code>]</code> for the end).</p> <p>Offset-based serialization instead opts to use references to sub-structures instead of nesting them. This allows skipping the creation of intermediate structures before accessing the data. Example: EXE files, game data archives.</p> <p>Command-stream serialization generates more compressible data but requires an intermediate step before elements can be accessed randomly. The compressibility comes from frequently repeating byte patterns (e.g. minified JSON frequently repeats the <code>},{\"</code> sequence) whereas offsets tend to be at least somewhat different.</p>"},{"location":"glossary-of-terms/Serialization/#example-classification-of-common-formats","title":"Example classification of common formats","text":"<ul> <li>JSON: text-based, direct, mapped, command-stream</li> <li>Protobuf: binary, compressed, schema-based, command-stream</li> <li>ZIP/TAR: binary, direct, schema-based, command-stream</li> <li>Game archive/package files: binary, direct, schema-based, offset-based</li> </ul>"},{"location":"glossary-of-terms/Serialization/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Serialization</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Shadow%20Cache/","title":"Shadow Cache","text":"<p>This is your middle school band\u2019s name</p>"},{"location":"glossary-of-terms/Shadow%20Cache/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Shadow Cache</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Smoke%20Testing/","title":"Smoke Testing","text":"<p>This is what you do when you wonder if you can smoke that weird look plant in your front yard</p>"},{"location":"glossary-of-terms/Smoke%20Testing/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Smoke Testing</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Sparse%20Volume/","title":"Sparse Volume","text":"<p>When you need to use more hairspray and teasing</p>"},{"location":"glossary-of-terms/Sparse%20Volume/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Sparse Volume</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Spatializing/","title":"Spatializing","text":"<p>This is what you do when you wonder if you can fit into that parking spot.</p>"},{"location":"glossary-of-terms/Spatializing/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Spatializing</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Spherical%20Harmonics/","title":"Spherical Harmonics","text":"<p>I don\u2019t know what this is, but it feels really good</p>"},{"location":"glossary-of-terms/Spherical%20Harmonics/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Spherical Harmonics</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Surface%20Shader/","title":"Surface Shader","text":"<p>This is when you try to tan with cocoa butter after checking to see if there is a really high UV index, like the surface of the sun</p>"},{"location":"glossary-of-terms/Surface%20Shader/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Surface Shader</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Template%20Page/","title":"Template Page","text":"<p>Copy from this page as a template for other [Term] pages.</p>"},{"location":"glossary-of-terms/Template%20Page/#how-to-write-a-term-snippet","title":"How to write a Term snippet:","text":"<p>Name of Page [Term] {Your Term Here}</p> <p>Then copy the following into the body of the page.</p> <p>Make sections and edit content as you see fit.</p>"},{"location":"glossary-of-terms/Template%20Page/#definitions","title":"Definition(s):","text":"<p>Provide one or more definitions for the term as it applies to technical art. </p> <p>Math definitions are good, but if possible, try to explain how these definitions might map to technical art.</p>"},{"location":"glossary-of-terms/Template%20Page/#applicationsways-to-use","title":"Applications/Ways to Use:","text":"<p>Provide one or more ways in which this term can be used in technical art.</p>"},{"location":"glossary-of-terms/Template%20Page/#examples","title":"Examples:","text":"<p>Provide an example of how the term is used.</p> <p>Visualizations of the term in action would be great (gifs, images).</p>"},{"location":"glossary-of-terms/Template%20Page/#external-resources","title":"External Resources:","text":"<p>Put pages here that reference or define the term, are good further learning resources or whitepapers, or were used to help create this page.</p>"},{"location":"glossary-of-terms/Texture%20Array/","title":"Texture Array","text":"<p>Well lookie there, you got a lot of textures!</p>"},{"location":"glossary-of-terms/Texture%20Array/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Texture Array</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Unit%20Testing/","title":"Unit Testing","text":"<p>This is when you press play in Unity and it makes you say \u201cy\u201d</p>"},{"location":"glossary-of-terms/Unit%20Testing/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Unit Testing</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/VATs%20%28Vertex%20Animation%20Textures%29/","title":"VATs (Vertex Animation Textures)","text":"<p>Don\u2019t fall into that vat of points!</p>"},{"location":"glossary-of-terms/VATs%20%28Vertex%20Animation%20Textures%29/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>VATs (Vertex Animation Textures)</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Vertex%20Stream/","title":"Vertex Stream","text":"<p>It is when there is lots of vertices and they decide to swim in the summer. </p>"},{"location":"glossary-of-terms/Vertex%20Stream/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Vertex Stream</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Virtual%20Function/","title":"Virtual Function","text":"<p>The \u2018parties\u2019 we had to endure all throughout the pandemic</p>  <p>A function that can be overridden in a subclass. This allows different subclasses to do different things when calling a function with the same signature (name and parameters) from a base class pointer.</p> <p>In C++ it is defined using the <code>virtual</code> keyword (before the declaration), which is only required for the topmost base class definition - subclasses make redefinitions of the same function virtual automatically, however it is recommended to mark it with the <code>override</code> keyword (at the end of the declaration) to catch mistakes.</p> <p>The C++ compiler cannot see through virtual function calls and therefore will not optimize them so for performance reasons they should be avoided in inner loops if possible. When processing data, it should often be possible to pass many values for processing instead of one per call.</p> <p>Virtual functions work by having each instance of a class refer to a table (array) of all such functions and use that table to find the right function to call.</p> <p>It is possible to define abstract virtual functions - functions for which there is no definition at the base class level.</p> <p>Note that virtual functions defined in subclasses will not be callable from a constructor or destructor of a base class. Pure virtual call errors happen when attempting to call abstract virtual functions from a constructor or destructor of a class where it is not yet defined.</p>"},{"location":"glossary-of-terms/Virtual%20Function/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Virtual Function</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/Virtual%20Texture/","title":"Virtual Texture","text":"<p>This is when you have a dream about work </p>"},{"location":"glossary-of-terms/Virtual%20Texture/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>Virtual Texture</li> </ul> </li> </ul>"},{"location":"glossary-of-terms/uRPC/","title":"uRPC","text":"<p>You are a PC, not a Mac</p>"},{"location":"glossary-of-terms/uRPC/#backlinks","title":"Backlinks","text":"<ul> <li>Glossary of Terms<ul> <li>uRPC</li> </ul> </li> </ul>"},{"location":"old-wiki/3ds%20Max/","title":"3ds Max","text":"<p>Pymxs helpful snippets</p>"},{"location":"old-wiki/3ds%20Max/#backlinks","title":"Backlinks","text":"<ul> <li>index<ul> <li>3ds Max</li> </ul> </li> </ul>"},{"location":"old-wiki/API-%28Application-Programming-Interface%29/","title":"API (Application Programming Interface)","text":"<p>Very happy in Frenchglish</p>"},{"location":"old-wiki/Barycentric-Coordinates/","title":"Barycentric Coordinates","text":"<p>This is when Bary loses his way home after a drink and can\u2019t seem to find his way back.</p>"},{"location":"old-wiki/Barycentric-Coordinates/#typical-use","title":"Typical use","text":"<p>Barycentric Coordinates, as typically used in the industry, is a 2 components coordinate system that defines a position within a triangle. They are often returned as results of intersection operation on mesh or triangles, or for interpolation purposes.</p>"},{"location":"old-wiki/Barycentric-Coordinates/#the-boring-stuff","title":"The boring stuff","text":"<p>Let <code>T</code> be a triangle defined by it\u2019s points <code>P0</code>, <code>P1</code> and <code>P2</code> The barycentric coordinates <code>U</code> and <code>V</code> defines a unique position <code>X</code> within that triangle with:  </p> <p><code>X = P0*W + P1*U + P2*V</code> where <code>W = 1-U-V</code> </p> <p>or  </p> <p><code>X = P0 + (P1-P0)*U + (P2-P0)*V</code></p>"},{"location":"old-wiki/Blob-Detection/","title":"Blob Detection","text":"<p>When you know you are about to spend the next week on the couch</p>"},{"location":"old-wiki/CPU--or-GPU-Bound/","title":"CPU  or GPU Bound","text":"<p>When you just can\u2019t fall out of love with your phone\u2019s processors</p>"},{"location":"old-wiki/Callback/","title":"Callback","text":"<p>This is when you really like that person who gave you their number</p>"},{"location":"old-wiki/Cascade-Pose-Regression/","title":"Cascade Pose Regression","text":"<p>This is when you are riding a sweet wave and you keep in making the same cool pose</p>"},{"location":"old-wiki/Compute-Shaders/","title":"Compute Shaders","text":"<p>This is when you tell a shader very sternly to use a calculator.</p>"},{"location":"old-wiki/Console-Threaded-WIP-animation/","title":"Console Threaded WIP animation","text":"<p>Little class for programs that need a \u201cI\u2019m not frozen\u201d animation for console printing Has an animated character in the console like -&gt;    | / - \\ It should be noted that you use <code>cursor_anim.start()</code> to start it and <code>cursor_anim.stop(bool)</code> to stop it</p> <p>Do not use the run function to start it as it will just loop forever (and that is called by the <code>cursor_anim.start()</code></p> <p>Setup is like  <pre><code>cursor_anim = CursorAnimation()\ncursor_anim.wip_msg = \"Doing a thing that takes a while...\"\ncursor_anim.success_msg = \"Successfully did the long thing!\"\ncursor_anim.fail_msg = \"Failed to do the thing!\"\ncursor_anim.start()\n# do long code\n\n# after code is done or if code has failed\n# if True is passed in stop that means you've done it successfully \n# and the success_msg will be printed, else if False, the fail_msg\ncursor_anim.stop(True)\n</code></pre></p> <pre><code>import threading\nimport time\n\nclass CursorAnimation(threading.Thread):\n\n    \"\"\"Threaded class to provide an animation in the console while syncing different parts/Files\n\n    Attributes:\n        fail_msg (str): Message to print at the end when Stop is called with False\n        success_msg (str): Message to print at the end when Stop is called with True\n        wip_msg (str): Message to print while doing the task\n    \"\"\"\n\n    def __init__(self):\n        self.flag = True\n        self.animation_char = \"|/-\\\\\"\n        self.idx = 0\n        threading.Thread.__init__(self)\n        self.wip_msg = \"DOING STUFF\"\n        self.success_msg = \"DID THE THING!\"\n        self.fail_msg = \"WE DID NOT DO THE THING!\"\n        self.max_len = 0\n\n    def run(self):\n        self.max_len = len(max([self.wip_msg, self.success_msg, self.fail_msg], key=len)) + 1\n\n        #skip to a new line so we know we're not going to get wonky print animations\n        print(\"\\n\")\n        while self.flag:\n            print(\"{}{}\".format(self.wip_msg, self.animation_char[self.idx % len(self.animation_char)]).ljust(self.max_len, \" \"), end=\"\\r\")\n            self.idx += 1\n            time.sleep(0.1)\n\n    def stop(self, success):\n        \"\"\"success is a bool to trigger either success or fail message\n        \"\"\"\n        self.flag = False\n        if success:\n            print(\"{}\".format(self.success_msg.ljust(self.max_len, \" \")), end=\"\\r\")\n        else:\n            print(\"{}\".format(self.fail_msg.ljust(self.max_len, \" \")), end=\"\\r\")\n</code></pre>"},{"location":"old-wiki/Convolve/","title":"Convolve","text":"<p>This is when you involve yourself very deeply and passionately with a cone</p>"},{"location":"old-wiki/Distance-Field/","title":"Distance Field","text":"<p>This is when you really hit it out of the park during your kid\u2019s little league game (even though you shouldn\u2019t even be playing\u2026)</p>"},{"location":"old-wiki/Drop-Selected-Model-To-Ground%28or-closest-model-below%29-%28No-Colliders-Needed%29/","title":"Drop Selected Model To Ground(or closest model below) (No Colliders Needed)","text":"<p>Editor Script/Menu Item - Put in script in Editor Folder. Allows for a single selected object to be dropped to the next nearest model below it.  Model that is dropped to ground is dropped to the pivot (something to note if your pivots are center of model etc) <pre><code>using System.Collections.Generic;\nusing System.Linq;\nusing Luna;\nusing UnityEditor;\nusing UnityEngine;\n\npublic class EditorMenuItems : MonoBehaviour\n{\n        [MenuItem(\"GameObject/Set Object On Ground - No Collider #G\", false, 10)]\n        private static void SetObjectOnGround()\n        {\n            GameObject selection  = Selection.activeGameObject;\n            Transform[] allObjects = UnityEngine.Object.FindObjectsOfType&lt;Transform&gt;() ;\n            //Try to find the objects that are closest to the current GO\n            IEnumerable&lt;Transform&gt; closeObjects = allObjects.Where(o =&gt;  o.position.y &lt; selection.transform.position.y \n                                                     &amp;&amp; o.gameObject != selection.gameObject\n                                                     &amp;&amp; o.GetComponent&lt;MeshRenderer&gt;() \n                                                     &amp;&amp; PointContainedIn2DPlane(selection.transform.position, o.GetComponent&lt;MeshRenderer&gt;().bounds));\n\n            Vector3 hitPoint = Vector3.zero;\n            float closestDist = 10000;\n            foreach (Transform closeObject in closeObjects)\n            {\n                RaycastHit hit = new RaycastHit();\n                bool bHit = HandleUtilityWrapper.IntersectRayMesh(new Ray(selection.transform.position, Vector3.down), closeObject.GetComponent&lt;MeshFilter&gt;(), out hit);\n                if (!bHit)\n                {\n                    continue;\n                }\n                if (hit.distance &lt; closestDist)\n                {\n                    // Debug.Log($\"Updating Closest: {closeObject.name} dist:{hit.distance}\");\n                    hitPoint = hit.point;\n                    closestDist = hit.distance;\n                }\n            }\n\n            Vector3 position = selection.transform.position;\n            position = new Vector3(position.x, hitPoint.y, position.z);\n            selection.transform.position = position;\n        }\n\n        private static bool PointContainedIn2DPlane(Vector3 point, Bounds bounds)\n        {\n            if ((point.x &gt; bounds.min.x &amp;&amp; point.x &lt; bounds.max.x) &amp;&amp; (point.z &gt; bounds.min.z &amp;&amp; point.z &lt; bounds.max.z))\n            {\n                return true;\n            }\n\n            return false;\n        }\n}\n</code></pre></p> <p>Class that opens access to mesh ray casting (Code adapted from Gist) <pre><code>using System;\nusing System.Reflection;\nusing UnityEngine;\nusing UnityEditor;\nusing System.Linq;\n&amp;emsp;\n// Allows for access to Unity function that they haven't made public (through reflection)\n// Makes it so we can do mesh raycasting (no colliders)\n[InitializeOnLoad]\n    public static class HandleUtilityWrapper\n    {\n        private static readonly Type       HandleUtility;\n        private static readonly MethodInfo IntersectRayMeshMethodInfo;\n&amp;emsp;\n        static HandleUtilityWrapper()\n        {\n            var editorTypes = typeof(Editor).Assembly.GetTypes();\n            HandleUtility              = editorTypes.FirstOrDefault(t =&gt; t.Name == \"HandleUtility\");\n            IntersectRayMeshMethodInfo = HandleUtility.GetMethod(\"IntersectRayMesh\", BindingFlags.Static | BindingFlags.NonPublic);\n        }\n&amp;emsp;\n        public static bool IntersectRayMesh(Ray ray, MeshFilter meshFilter, out RaycastHit hit)\n        {\n            return IntersectRayMesh(ray, meshFilter.sharedMesh, meshFilter.transform.localToWorldMatrix, out hit);\n        }\n&amp;emsp;\n        private static object[] _parms = new object[4];\n&amp;emsp;\n        public static bool IntersectRayMesh(Ray ray, Mesh mesh, Matrix4x4 matrix, out RaycastHit hit)\n        {\n            _parms[0] = ray;\n            _parms[1] = mesh;\n            _parms[2] = matrix;\n            _parms[3] = null;\n&amp;emsp;\n            var result = (bool) IntersectRayMeshMethodInfo.Invoke(null, _parms);\n            hit = (RaycastHit) _parms[3];\n            return result;\n        }\n    }\n&amp;emsp;\n</code></pre></p>"},{"location":"old-wiki/Event-Listener/","title":"Event Listener","text":"<p>This is when it\u2019s hard to listen to another person at a concert so you hold up your phone to each other\u2019s mouth, hit record, and play back what you each said to one another. </p>"},{"location":"old-wiki/Foveation/","title":"Foveation","text":"<p>When you really just wanna render the center of your view</p>"},{"location":"old-wiki/Geometry-Shaders/","title":"Geometry Shaders","text":"<p>This is when you geometry gets really fed up with how you are dressing him and takes matters into his own hands</p>"},{"location":"old-wiki/Glossary-Template-Page/","title":"Glossary Template Page","text":"<p>Copy from this page as a template for other [Term] pages.</p>"},{"location":"old-wiki/Glossary-Template-Page/#how-to-write-a-term-snippet","title":"How to write a Term snippet:","text":"<p>Name of Page [Term] {Your Term Here}</p> <p>Then copy the following into the body of the page.</p> <p>Make sections and edit content as you see fit.</p>"},{"location":"old-wiki/Glossary-Template-Page/#definitions","title":"Definition(s):","text":"<p>Provide one or more definitions for the term as it applies to technical art. </p> <p>Math definitions are good, but if possible, try to explain how these definitions might map to technical art.</p>"},{"location":"old-wiki/Glossary-Template-Page/#applicationsways-to-use","title":"Applications/Ways to Use:","text":"<p>Provide one or more ways in which this term can be used in technical art.</p>"},{"location":"old-wiki/Glossary-Template-Page/#examples","title":"Examples:","text":"<p>Provide an example of how the term is used.</p> <p>Visualizations of the term in action would be great (gifs, images).</p>"},{"location":"old-wiki/Glossary-Template-Page/#external-resources","title":"External Resources:","text":"<p>Put pages here that reference or define the term, are good further learning resources or whitepapers, or were used to help create this page.</p>"},{"location":"old-wiki/Glossary-of-Terms/","title":"Glossary of Terms","text":"<p>There are many definitions for technical artist-related terms available at the VES Glossary.  If you can\u2019t find the term you are looking for there, check our pages below. </p> <p>This page is under construction. Please contribute to it if you know the definition to these terms, or see anything that needs correcting.</p>"},{"location":"old-wiki/Glossary-of-Terms/#list-of-technical-art-terms","title":"List of Technical Art Terms","text":"<p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>"},{"location":"old-wiki/Glossary-of-Terms/#a","title":"A","text":"<p>API</p>"},{"location":"old-wiki/Glossary-of-Terms/#b","title":"B","text":"<p>Barycentric Coordinates</p> <p>Blob Detection</p>"},{"location":"old-wiki/Glossary-of-Terms/#c","title":"C","text":"<p>Callback</p> <p>Cascade Pose Regression</p> <p>Compute Shaders</p> <p>Convolve </p> <p>CPU or GPU Bound</p>"},{"location":"old-wiki/Glossary-of-Terms/#d","title":"D","text":"<p>Distance Field </p>"},{"location":"old-wiki/Glossary-of-Terms/#e","title":"E","text":"<p>Event Listener</p>"},{"location":"old-wiki/Glossary-of-Terms/#f","title":"F","text":"<p>Foveation</p>"},{"location":"old-wiki/Glossary-of-Terms/#g","title":"G","text":"<p>Geometry Shaders</p>"},{"location":"old-wiki/Glossary-of-Terms/#h","title":"H","text":"<p>Hysteresis</p>"},{"location":"old-wiki/Glossary-of-Terms/#i","title":"I","text":""},{"location":"old-wiki/Glossary-of-Terms/#j","title":"J","text":""},{"location":"old-wiki/Glossary-of-Terms/#k","title":"K","text":""},{"location":"old-wiki/Glossary-of-Terms/#l","title":"L","text":"<p>Laplace Operator</p>"},{"location":"old-wiki/Glossary-of-Terms/#m","title":"M","text":"<p>Material X</p> <p>Microservice</p> <p>Migration Path</p>"},{"location":"old-wiki/Glossary-of-Terms/#n","title":"N","text":""},{"location":"old-wiki/Glossary-of-Terms/#o","title":"O","text":"<p>Optical Flow</p>"},{"location":"old-wiki/Glossary-of-Terms/#p","title":"P","text":"<p>Package Server</p> <p>Parse</p> <p>Prim</p> <p>Plates (Facial Capture Animation)</p> <p>Proc Hours</p>"},{"location":"old-wiki/Glossary-of-Terms/#q","title":"Q","text":"<p>Quantized Mesh</p> <p>Quantized Quaternion</p> <p>Qt</p>"},{"location":"old-wiki/Glossary-of-Terms/#r","title":"R","text":"<p>Radial Sorting</p> <p>Raymarching</p> <p>Relaxed Cone Mapping</p> <p>ROMs (Range of Motion)</p>"},{"location":"old-wiki/Glossary-of-Terms/#s","title":"S","text":"<p>Serialization</p> <p>Shadow Cache</p> <p>Smoke Testing</p> <p>Sparse Volume</p> <p>Spatializing</p> <p>Spherical Harmonics</p> <p>Surface Shader</p>"},{"location":"old-wiki/Glossary-of-Terms/#t","title":"T","text":"<p>Texture Array</p>"},{"location":"old-wiki/Glossary-of-Terms/#u","title":"U","text":"<p>Unit Testing</p> <p>uRPC</p>"},{"location":"old-wiki/Glossary-of-Terms/#v","title":"V","text":"<p>VATs (Vertex Animation Textures)</p> <p>Vertex Stream</p> <p>Virtual Function</p> <p>Virtual Textures</p>"},{"location":"old-wiki/Glossary-of-Terms/#w","title":"W","text":""},{"location":"old-wiki/Glossary-of-Terms/#x","title":"X","text":""},{"location":"old-wiki/Glossary-of-Terms/#y","title":"Y","text":""},{"location":"old-wiki/Glossary-of-Terms/#z","title":"Z","text":""},{"location":"old-wiki/Glossary-of-Terms/#backlinks","title":"Backlinks","text":"<ul> <li>index<ul> <li>Glossary-of-Terms</li> </ul> </li> </ul>"},{"location":"old-wiki/Home/","title":"Home","text":"<p>Welcome to the TAO-Wiki\u2026wiki!</p>"},{"location":"old-wiki/Home/#how-to-contribute","title":"How to contribute:","text":"<p>If your code program/language does not already exist in the side bar -&gt; Please do the following, if it does exist already skip to the next section:</p> <ol> <li>Make a new page for your program/language such as \u201cMaya\u201d</li> <li>Save the page and then click the pencil (edit) icon on the Sidebar (at the top) </li> <li>Add <code>[Language/Program](https://github.com/techartorg/TAO-Wiki/wiki/{Language/Program})</code> into the page (preferably \u201calphabetical\u201d At least try is all we ask)</li> </ol> <p>Then you\u2019re ready to follow the next section for creating your snippet page.</p> <ol> <li>Create a new page and call it <code>[Language/Program] {Descriptive name of snippet}</code></li> <li>Add your snippet and save.</li> <li>Navigate to the main <code>Language/Program</code> page for your snippet</li> <li>Edit the page and add a new link in the page to your new snippet page.</li> </ol> <p>This will keep the sidebar clean and clear.</p>"},{"location":"old-wiki/Houdini-HDA-Naming-Conventions/","title":"Houdini HDA Naming Conventions","text":"<p>Back to Houdini</p> <p>The naming convention of .hda and .shelf are based on the SideFX versioning architecture as described here. http://www.sidefx.com/docs/houdini/assets/namespaces.html </p> <p>For a .hda and a .shelf there are four major names you need to know about:</p> <ul> <li>The filename on disk  - company.context__assetname__1.0.hda</li> <li>The operator name     - company::assetname::1.0</li> <li>The operator label    - Asset Name</li> <li>Tab submenu entry     - company\"collection\u201d Directory for HDAs &amp; Shelfs - $HOUDINI_PATH/otls $HOUDINI_PATH/toolbar</li> </ul> <p>The operator name convention is the most important. </p> <p>First is the namespace as identified by \u201ccompany\u201d in our case this represent the different studios. In some cases this could represent a codename of a project when a studio or group can not be identified at that time. This prevents libraries of hda from clashing when built at different studios. Also allowing external libraries to be used. You can even use this to define teams within the same project.</p> <p>Second is the assetname it is the non space, non camel case, lower case name of your tool. For the label this is First word capitalized space separated asset name. The label is the human readable version.</p> <p>Third is the major and minor version of your asset. The major version is a number that represent a significant non-backwards compatible change to the hda. If you rework the node 100% from scratch or change a significant function of the node you update the major number. A minor version is an additive process like an additional parameter or a bug fix would not over haul. It is important not to get this confused with source control. Edits and fixes are just check in and check out of the same .hda. If you have an .hda deployed in your system and you don\u2019t want to break everyones production tools this is a good reason to major or minor version control.</p> <p>The double colon :: is the separate buffer used only in the operator name. For the file on disk this gets converted to an underscore. In advanced pipeline you can use a modified http file structure to store assets based on this.</p> <p>The context in the file on disk is inherent in the operator name of the file so it does not need to be include. It is included in the file on disk name to separate .hdas based on their internal structures which are unique. Additionally you can share the same asset name of a file in different context. This helps in scripting and OPcustomize when you do not have to load up houdini to see the name of the .hda.</p> <p>It is important to store one .hda or one .shelf tool per a file. This allows multiple people to work on separate tools at a time. This is very important for source control.</p> <p>The tab submenu entry is how you organize your tools in the tab menu. You do not need to add extra modifiers to the asset name to compensate for this. Under the company name you can add an extra folder for any collection of tools like \u201cImport\u201d, \u201cEngine\u201d, \u201cTerrain\u201d etc. We do not put them into the regular submenu entries because we would not be able to find our own tools. If a asset name collides this submenu entry will be bracketed () to tell you the difference.</p> <p>Further when creating your asset libraries use a standard $HOUDINI_PATH folder structure don\u2019t be original. This allows us to append multiple studios and libraries tools together. Like the gameshelf. Place all .hda in /otls and shelfs in /toolbar etc. </p> <p>Additionally do not save your .hda in exploded mode via the hotl.exe. In production environments all these separated files can cause havoc when they get out of sync on disk. You can work with the .hda like this but compile them about before distribution in your studio.</p> <p>For an example of folder structure you can look here: https://github.com/LaidlawFX/LaidlawFX  https://github.com/sideeffects/GameDevelopmentToolset or within </p> <p>Back to Houdini</p>"},{"location":"old-wiki/Houdini-Setting-up-a-studio-environment/","title":"Houdini Setting up a studio environment","text":"<p>Back to Houdini</p> <p>Houdini is a very easy software to modify and integrate with whatever pipeline you have. However, the big asterisk, and the reason for this documentation is there are easier paths than others to achieve these goals.</p> <p>Back to Houdini</p>"},{"location":"old-wiki/Houdini/","title":"Welcome to the TAO Houdini Page!","text":""},{"location":"old-wiki/Houdini/#welcome-to-the-tao-houdini-page","title":"Welcome to the TAO Houdini Page!","text":"<p>These are current drops of wisdom transcribed from the fast moving current of the Slack flow. </p> <p>Don\u2019t get set into one form, adapt it and build your own, and let it grow, be like water. Empty your mind, be formless, shapeless \u2014 like water. Now you put water in a cup, it becomes the cup; You put water into a bottle it becomes the bottle; You put it in a teapot it becomes the teapot. Now water can flow or it can crash. Be water, my friend. -Bruce Lee</p> <p>Houdini Pipeline Docs</p> <ul> <li>Houdini Setting up a studio environment</li> <li>Houdini HDA Naming Conventions without a SQL database.</li> </ul>"},{"location":"old-wiki/Houdini/#backlinks","title":"Backlinks","text":"<ul> <li>index<ul> <li>Houdini</li> </ul> </li> <li>Houdini-HDA-Naming-Conventions<ul> <li>Back to Houdini</li> <li>Back to Houdini</li> </ul> </li> <li>Houdini-Setting-up-a-studio-environment<ul> <li>Back to Houdini</li> <li>Back to Houdini</li> </ul> </li> </ul>"},{"location":"old-wiki/Hysteresis/","title":"Hysteresis","text":"<p>When you are hysterical for a long time after a good joke</p>"},{"location":"old-wiki/Laplace-Operator/","title":"Laplace Operator","text":"<p>This is when you decide to take him/her/they back to your place but you decide it\u2019s Spanish (si si)</p>"},{"location":"old-wiki/Material-X/","title":"Material X","text":"<p>This is when a material gains the ability to see into other people\u2019s thoughts</p>"},{"location":"old-wiki/Max/","title":"Max","text":"<p>Pymxs helpful snippets</p>"},{"location":"old-wiki/Maya/","title":"Maya","text":"<p>Page for Maya Snippets (Delete this when you add the first snippet)</p> <p>a cool resource</p> <p>i use this as a callback to do the thing.</p>"},{"location":"old-wiki/Maya/#backlinks","title":"Backlinks","text":"<ul> <li>index<ul> <li>Maya</li> </ul> </li> </ul>"},{"location":"old-wiki/Microservice/","title":"Microservice","text":"<p>This is when you decide to open up a restaurant in your microwave</p>"},{"location":"old-wiki/Migration-Path/","title":"Migration Path","text":"<p>Just follow the birds</p>"},{"location":"old-wiki/Optical-Flow/","title":"Optical Flow","text":"<p>This is what happens when you have one too many gin &amp; tonics and you can\u2019t stop staring at that guy dancing</p>"},{"location":"old-wiki/Package-Server/","title":"Package Server","text":"<p>Your Amazon driver</p>"},{"location":"old-wiki/Paired-Blend-Node/","title":"Paired Blend Node","text":"<p>This is what you use to tie yourself together with your partner so that you can start dressing in the same exact outfits.</p>"},{"location":"old-wiki/Parse/","title":"Parse","text":"<p>A combination of partying but very tersely</p>"},{"location":"old-wiki/Plates-%28Facial-Capture-Animation%29/","title":"Plates (Facial Capture Animation)","text":"<p>This is when you make a facial animation of someone balancing plates on their chin</p>"},{"location":"old-wiki/Prim/","title":"Prim","text":"<p>And proper</p>"},{"location":"old-wiki/Proc-Hours/","title":"Proc Hours","text":"<p>Not sure if I wrote or heard this term correct &gt;.&gt;</p>"},{"location":"old-wiki/Python3-Snippets/","title":"Python3 Snippets","text":"<p>Any new Snippets should be added below as a link to the snippet</p> <ul> <li>Find Latest Installed Program on System</li> <li>Extract Icon from Exe (with alpha)</li> <li>Console: Threaded \u201cWIP\u201d animation</li> </ul>"},{"location":"old-wiki/Python3-Snippets/#backlinks","title":"Backlinks","text":"<ul> <li>index<ul> <li>Python3-Snippets</li> </ul> </li> </ul>"},{"location":"old-wiki/Qt/","title":"Qt","text":"<p>Slang for a cute person</p>"},{"location":"old-wiki/Quantized-Mesh/","title":"Quantized Mesh","text":"<p>This is when you mesh leaps into Quantum Space</p>"},{"location":"old-wiki/Quantized-Quaternion/","title":"Quantized Quaternion","text":"<p>This is when there is a tasty quater-ion and you only have so much of it. </p>"},{"location":"old-wiki/ROMs-%28Range-of-Motion%29/","title":"ROMs (Range of Motion)","text":"<p>This is what you definitely did not use ZSnes to play in the early 00\u2019s</p>"},{"location":"old-wiki/Radial-Sorting/","title":"Radial Sorting","text":"<p>This is when you categorize folks based on the size of their badunkadunk</p>"},{"location":"old-wiki/Raymarching/","title":"Raymarching","text":"<p>This is when you first boyfriend gets really mad and storms out</p>"},{"location":"old-wiki/Relaxed-Cone-Mapping/","title":"Relaxed Cone Mapping","text":"<p>This is when you use your ice cream cone to make different patterns on the sidewalk because the heat is making you tired</p>"},{"location":"old-wiki/Serialization/","title":"Serialization","text":"<p>It\u2019s when you pour more cereal into milk that has already had cereal in it, then pour ever more milk</p>"},{"location":"old-wiki/Shadow-Cache/","title":"Shadow Cache","text":"<p>This is your middle school band\u2019s name</p>"},{"location":"old-wiki/Smoke-Testing/","title":"Smoke Testing","text":"<p>This is what you do when you wonder if you can smoke that weird look plant in your front yard</p>"},{"location":"old-wiki/Sparse-Volume/","title":"Sparse Volume","text":"<p>When you need to use more hairspray and teasing</p>"},{"location":"old-wiki/Spatializing/","title":"Spatializing","text":"<p>This is what you do when you wonder if you can fit into that parking spot.</p>"},{"location":"old-wiki/Spherical-Harmonics/","title":"Spherical Harmonics","text":"<p>I don\u2019t know what this is, but it feels really good</p>"},{"location":"old-wiki/Surface-Shader/","title":"Surface Shader","text":"<p>This is when you try to tan with cocoa butter after checking to see if there is a really high UV index, like the surface of the sun</p>"},{"location":"old-wiki/Texture-Array/","title":"Texture Array","text":"<p>Well lookie there, you got a lot of textures!</p>"},{"location":"old-wiki/Tickable-PySide2-Window-BaseClass/","title":"Tickable PySide2 Window BaseClass","text":"<p>Using the below baseclass, You can have a tickable window for PySide2 UI To subscribe to the tick, it should be something like <pre><code>self.sig_tick.connect(self.my_func)\n</code></pre></p>"},{"location":"old-wiki/Tickable-PySide2-Window-BaseClass/#base-class","title":"BASE CLASS","text":"<pre><code>import unreal\nfrom PySide2 import QtWidgets\nfrom PySide2.QtCore import Signal\n\nclass QtUE_Window(QtWidgets.QMainWindow):\n    # Signal that can be conneted to for tick functionality\n    sig_tick = Signal(float)\n    def __init__(self, parent=None):\n        super(QtUE_Window, self).__init__(parent)\n        self.tick_handle = unreal.register_slate_post_tick_callback(self.__QtAppTick__)\n\n    def __QtAppTick__(self, delta_seconds):\n        # This function will receive the tick from Unreal\n        QtWidgets.QApplication.processEvents()\n        self.sig_tick.emit(delta_seconds)\n\n    def __QtAppQuit__(self):\n        # This function will be called when the application is closing.\n        unreal.unregister_slate_post_tick_callback(self.tick_handle)\n\n    def closeEvent(self, event):\n        super(QtUE_Window, self).closeEvent(event)\n        self.__QtAppQuit__()\n</code></pre>"},{"location":"old-wiki/Unit-Testing/","title":"Unit Testing","text":"<p>This is when you press play in Unity and it makes you say \u201cy\u201d</p>"},{"location":"old-wiki/Unity/","title":"Unity","text":"<ul> <li>Ground Model Without Colliders</li> </ul>"},{"location":"old-wiki/Unity/#backlinks","title":"Backlinks","text":"<ul> <li>index<ul> <li>Unity</li> </ul> </li> </ul>"},{"location":"old-wiki/Unreal/","title":"Unreal","text":""},{"location":"old-wiki/Unreal/#reading-the-official-python-api-docs","title":"Reading the official Python API docs","text":"<p>For Python in Unreal start with the official docs, e.g. to get all actors in Unreal:</p> <ul> <li>I can use the EditorLevelLibrary docs</li> <li>The docs tell me that the <code>get_all_level_actors()</code> method returns an array of Actors. So I go check out the docs for Actor.</li> <li>The docs for Actor show I can run a <code>get_name()</code> method <pre><code>import unreal\nactors = unreal.EditorLevelLibrary.get_all_level_actors()\nactor_names = [x.get_name() for x in actors]\n</code></pre> It\u2019s recommended to start experimenting line by line, in the Unreal Python console, and just print the results.</li> </ul>"},{"location":"old-wiki/Unreal/#other","title":"Other","text":"<ul> <li>A great resource for Unreal Python scripts, tips &amp; tricks: https://unrealcommunity.wiki/</li> <li>How to make an actor that can Tick In Editor.</li> <li>Tickable PySide2 Window BaseClass</li> </ul>"},{"location":"old-wiki/Unreal/#backlinks","title":"Backlinks","text":"<ul> <li>index<ul> <li>Unreal</li> </ul> </li> </ul>"},{"location":"old-wiki/VATs-%28Vertex-Animation-Textures%29/","title":"VATs (Vertex Animation Textures)","text":"<p>Don\u2019t fall into that vat of points!</p>"},{"location":"old-wiki/Vertex-Stream/","title":"Vertex Stream","text":"<p>It is when there is lots of vertices and they decide to swim in the summer. </p>"},{"location":"old-wiki/Virtual-Function/","title":"Virtual Function","text":"<p>The \u2018parties\u2019 we had to endure all throughout the pandemic</p>"},{"location":"old-wiki/Virtual-Texture/","title":"Virtual Texture","text":"<p>This is when you have a dream about work </p>"},{"location":"old-wiki/%5BPython%5D-Py3-Extract-icon-from-exe-and-save-as-png-%28with-alpha%29/","title":"[Python] Py3 Extract icon from exe and save as png (with alpha)","text":"<pre><code>!#python3\ndef extract_icon_from_exe(icon_in_path, icon_name, icon_out_path, out_width = 56, out_height = 56):\n\n    \"\"\"Given an icon path (exe file) extract it and output at the desired width/height as a png image.\n\n    Args:\n        icon_in_path (string): path to the exe to extract the icon from\n        icon_name (string): name of the icon so we can save it out with the correct name\n        icon_out_path (string): final destination (FOLDER) - Gets combined with icon_name for full icon_path\n        out_width (int, optional): desired icon width\n        out_height (int, optional): desired icon height\n\n    Returns:\n        string: path to the final icon\n    \"\"\"\n    import win32ui\n    import win32gui\n    import win32con\n    import win32api\n    from PIL import Image\n\n    ico_x = win32api.GetSystemMetrics(win32con.SM_CXICON)\n    ico_y = win32api.GetSystemMetrics(win32con.SM_CYICON)\n\n    large, small = win32gui.ExtractIconEx(icon_in_path,0)\n    win32gui.DestroyIcon(small[0])\n\n    hdc = win32ui.CreateDCFromHandle( win32gui.GetDC(0) )\n    hbmp = win32ui.CreateBitmap()\n    hbmp.CreateCompatibleBitmap( hdc, ico_x, ico_x )\n    hdc = hdc.CreateCompatibleDC()\n\n    hdc.SelectObject( hbmp )\n    hdc.DrawIcon( (0,0), large[0] )\n\n    bmpstr = hbmp.GetBitmapBits(True)\n    icon = Image.frombuffer(\n        'RGBA',\n        (32,32),\n        bmpstr, 'raw', 'BGRA', 0, 1\n    )\n\n    full_outpath = os.path.join(icon_out_path, \"{}.png\".format(icon_name))\n    icon.resize((out_width, out_height))\n    icon.save(full_outpath)\n    #return the final path to the image\n    return full_outpath\n</code></pre>"},{"location":"old-wiki/%5BPython%5D-Py3-Find-latest-installed-program-on-system/","title":"[Python] Py3 Find latest installed program on system","text":"<pre><code>#!python3\nimport winreg\ndef latest_installed_program(software_name, search_64_first=True, first_call = True):\n    \"\"\"Try to find the latest installed version of a specified program on the system\n\n    Args:\n        software_name (string): name of the software to look for (3ds Max, Autodesk Maya etc.)\n\n        search_64_first (int): where to check first, if you know it's going to be  winreg.KEY_WOW64_32KEY then put \n\n        first_call (bool): Don't set this manually.\n    Returns:\n        dictionary: dictionary with the latest program info in it.\n\n    Example usage:\n    latest_installed_program(\"3ds Max\", True )\n    \"\"\"\n    win_flag = None\n    if search_64_first:\n        win_flag = winreg.KEY_WOW64_64KEY \n    else:\n        win_flag = winreg.KEY_WOW64_32KEY\n\n    hive=winreg.HKEY_LOCAL_MACHINE\n\n    aReg = winreg.ConnectRegistry(None, hive)\n    icons = r\"HKEY_CLASSES_ROOT\\Installer\\Products\\\"\"\n    aKey = winreg.OpenKey(aReg, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\",\n                          0, winreg.KEY_READ | win_flag)\n\n    count_subkey = winreg.QueryInfoKey(aKey)[0]\n    #way to make it so we don't infinite loop\n\n    latest_version = {}\n    latest_version[\"version\"] = 0\n\n    for i in range(count_subkey):\n        software = {}\n        try:\n            asubkey_name = winreg.EnumKey(aKey, i)\n            asubkey = winreg.OpenKey(aKey, asubkey_name)\n            name = winreg.QueryValueEx(asubkey, \"DisplayName\")[0]\n            if software_name.lower() in name.lower():\n                software['name'] = name\n                try:\n                    software['version'] = winreg.QueryValueEx(asubkey, \"DisplayVersion\")[0]\n                except EnvironmentError:\n                    software['version'] = 'undefined'\n                try:\n                    software['publisher'] = winreg.QueryValueEx(asubkey, \"Publisher\")[0]\n                except EnvironmentError:\n                    software['publisher'] = 'undefined'\n                try:\n                    software['path'] = \"{}\".format(winreg.QueryValueEx(asubkey, \"InstallLocation\")[0])\n                except EnvironmentError:\n                    software['path'] = 'undefined'\n\n                if software[\"version\"] &gt; str(latest_version[\"version\"]) or latest_version[\"version\"] == 0:\n                    latest_version = software\n\n        except EnvironmentError:\n            continue\n    #search the other flag\n    if search_64_first:\n        search_64_first = False\n    else:\n        search_64_first = True\n\n    if first_call and latest_version[\"version\"] == 0:\n        latest_version = latest_installed_program(software_name, search_64_first, False)\n\n    return latest_version\n\n\nlatest_installed_program(\"Autodesk Maya\")\nlatest_installed_program(\"3ds Max\")\nlatest_installed_program(\"Photoshop\")\n\n\n\"\"\"\nreturns\n#3ds Max {'version': '20.4.0.4254', 'publisher': 'Autodesk', 'path': 'C:\\\\Program Files\\\\Autodesk\\\\3ds Max 2018\\\\', 'name': 'Autodesk 3ds Max 2018'}\nAutodesk Maya {'version': '18.0.0.5870', 'publisher': 'Autodesk', 'path': 'D:\\\\Program Files\\\\Autodesk\\\\Maya2018\\\\', 'name': 'Autodesk Maya 2018'}\nPhotoshop {'version': '20.0.1', 'publisher': 'Adobe Systems Incorporated', 'path': 'C:\\\\Program Files\\\\Adobe\\\\Adobe Photoshop CC 2019', 'name': 'Adobe Photoshop CC 2019'}\n\"\"\"\n</code></pre>"},{"location":"old-wiki/%5BUnreal%5D-How-to-make-an-actor-that-can-Tick-In-Editor/","title":"[Unreal] How to make an actor that can Tick In Editor","text":""},{"location":"old-wiki/%5BUnreal%5D-How-to-make-an-actor-that-can-Tick-In-Editor/#why-not-use-an-editor-utility-actor","title":"Why not use an Editor Utility Actor?","text":"<p>Editor Utility Actors don\u2019t quite get you the exact functionality that seems useful enough for ticking in the editor via an actor. It will tick in the preview windows of blueprint and potentially lead to lots of head scratching as you realize that the blueprint you were working on is logging when you are trying to use it in other places. Also, there are times where you actually do want the same actor runtime as well (It\u2019s rare but totally a valid case).</p>"},{"location":"old-wiki/%5BUnreal%5D-How-to-make-an-actor-that-can-Tick-In-Editor/#the-solve-make-your-own-actor-class","title":"The Solve.. Make your own actor class!","text":"<p>In your custom actor class you can use this to add a bool that toggles being able to tick in the editor. This way whenever you need this you can just simply check it on and get going. It also is separated so that you can have different logic happen in the editor vs in-game. Most of the time I end up with 1-1 anyway but its nice to have the option. </p> <p>header file <pre><code>/** Allows Tick To happen in the editor viewport*/\nvirtual bool ShouldTickIfViewportsOnly() const override;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere)\nbool UseEditorTick = false;\n\n/** Tick that runs ONLY in the editor viewport.*/\nUFUNCTION(BlueprintImplementableEvent, CallInEditor, Category = \"Events\")\nvoid BlueprintEditorTick(float DeltaTime);\n</code></pre></p> <p>cpp file <pre><code>// Separated Tick functionality and making sure that it truly can only happen in the editor. Might be a bit overkill but you can easily consolidate if you'd like. \nvoid YourActor::Tick(float DeltaTime)\n{\n    if (GetWorld() != nullptr &amp;&amp; GetWorld()-&gt;WorldType == EWorldType::Editor)\n    {\n#if WITH_EDITOR\n        BlueprintEditorTick(DeltaTime);\n#endif\n    }\n    else\n    {\n        Super::Tick(DeltaTime);\n    }\n}\n\n// This ultimately is what controls whether or not it can even tick at all in the editor view port. But, it is EVERY view port so it still needs to be blocked from preview windows and junk.\nbool YourActor::ShouldTickIfViewportsOnly() const\n{\n    if (GetWorld() != nullptr &amp;&amp; GetWorld()-&gt;WorldType == EWorldType::Editor &amp;&amp; UseEditorTick)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n</code></pre></p> <p>Then when you are done you should be able to add the new BlueprintEditorTick to your event graph and get rolling!</p>"},{"location":"old-wiki/%5BUnreal%5D-How-to-make-an-actor-that-can-Tick-In-Editor/#final-notes","title":"Final Notes","text":"<p>This is pretty dangerous if you aren\u2019t mindful with what nodes you use in here.  Try not to do things like Add Component or any other nodes that would spawn objects into the world or if you do make sure you store them and clean them up.  Delays might work but they could be a bit odd as well. Just be aware that it can be fragile at times so make sure to give unreal some cake beforehand\u2026 \u2764\ufe0f </p>"},{"location":"old-wiki/_Footer/","title":"Footer","text":""},{"location":"old-wiki/_Sidebar/","title":"Sidebar","text":"<p>Home</p> <ul> <li> <p>Glossary of Terms</p> </li> <li> <p>Houdini</p> </li> <li> <p>Max</p> </li> <li> <p>Maya</p> </li> <li> <p>Py3</p> </li> <li> <p>Unity</p> </li> <li> <p>Unreal</p> </li> </ul>"},{"location":"old-wiki/pymxs---Helpful-Snippets/","title":"Selection Sets:","text":""},{"location":"old-wiki/pymxs---Helpful-Snippets/#selection-sets","title":"Selection Sets:","text":"<p>Getting Named Selection Sets is a fairly straightforward procedure for Object Selection Sets, but it\u2019s a bit more \u201cdifficult\u201d to find how to do it for object mode ones (Vert/Edge/Faces etc), so to save the hassle Getting SelSets From object modes (verts/edges/poly/etc) This is the \u201csame\u201d just change whatever mode you\u2019re looking for</p> <ul> <li>Get Selection Set names from Faces Sets: <pre><code>import pymxs\nrt = pymxs.runtime\nthing = rt.getCurrentSelection()[0]\nprint(thing.Faces.selSetNames)\n#(\"TestSet\", \"TestSet2\") # example output\n</code></pre> Obviously then you can select a set by doing something like: <pre><code>thing.selectedFaces = thing.Faces[\"TestSet2\"]\n</code></pre></li> </ul>"},{"location":"old-wiki/pymxs---Helpful-Snippets/#get-all-materials","title":"Get All Materials","text":"<p>Does a check to see if you have multi material on your model, if it does, iterates and tries to do a face select to check if the material is actually on the model and returns a list of material ID\u2019s and what faces have it.  <pre><code>def get_all_mats(model):\n    materials = []\n    dupe = rt.copy(model)\n    rt.resetXForm(dupe)\n    rt.collapseStack(dupe)\n    material = dupe.material\n    if rt.classOf(material) == rt.Multimaterial:\n        for matID in xrange(material.numsubs):\n            #see if we can select any faces for each material\n            dupe.selectByMaterial(matID+1)\n            faces = dupe.GetSelection(rt.name(\"Face\"))\n            numSelected = faces.numberset\n            if numSelected &gt; 0:\n                materials.append({material[matID]: numSelected})\n    elif rt.classOf(material) == rt.StandardMaterial:\n        # if we only have one material we assume that it is on every face\n        materials.append({material.name: dupe.mesh.numFaces})\n    rt.delete(dupe)\n    return materials\n</code></pre></p>"},{"location":"old-wiki/pymxs---Helpful-Snippets/#ez-multi-import","title":"EZ Multi Import","text":"<p>Very small multi file importer script. Drives me nuts having to import multiple fbx\u2019s etc. <pre><code>from PySide2 import QtWidgets\nimport pymxs\nrt = pymxs.runtime\n\ndef main():\n    dialog = QtWidgets.QFileDialog()\n\n    files = dialog.getOpenFileNames(None, \"Multi Importer\", \"\", \"FBX (*.fbx);; OBJ (*.obj);; All Files (*.*)\")\n    for f in files[0]:\n        rt.importFile(f, rt.name(\"noPrompt\"))\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"old-wiki/pymxs---Helpful-Snippets/#get-all-children-define-specific-type-of-child-to-get","title":"Get all Children + define specific type of child to get","text":"<p>Provide a node as a parent to search down from and optionally give a node type in Max to search for such as Lights, Geometry, FFD\u2019s etc. Get back a list of the children  <pre><code>def get_all_children(parent, node_type=None):\n    \"\"\"Handy function to get all the children of a given node\n\n    Args:\n        parent (3dsmax Node1): node to get all children of\n        node_type (None, runtime.class): give class to check for\n                                         e.g. rt.FFDBox/rt.GeometryClass etc.\n\n    Returns:\n        list: list of all children of the parent node\n    \"\"\"\n    def list_children(node):\n        children = []\n        for c in node.Children:\n            children.append(c)\n            children = children + list_children(c)\n        return children\n    child_list = list_children(parent)\n\n    return ([x for x in child_list if rt.superClassOf(x) == node_type]\n            if node_type else child_list)\n</code></pre></p>"},{"location":"old-wiki/pymxs---Helpful-Snippets/#is-ancestor","title":"Is Ancestor","text":"<p>Check back up the tree from a node to see if a given named node is an ancestor <pre><code>def is_ancestor(node, name):\n    \"\"\"Given the node, is there an ancestor named \"name\"\n\n    Args:\n        node (max Node): node to check for an ancestor on\n        name (string): name of the ancestor to check for\n\n    Returns:\n        bool: True if the node is an ancestor\n    \"\"\"\n    found = False\n    top = False\n    curr_ancestor = node.parent\n    if curr_ancestor.name == name:\n        return True\n\n    while curr_ancestor.parent is not None:\n        curr_ancestor = curr_ancestor.parent\n        if curr_ancestor.name == name:\n            return True\n    return False\n</code></pre></p>"},{"location":"old-wiki/uRPC/","title":"uRPC","text":"<p>You are a PC, not a Mac</p>"},{"location":"wiki-test-notes/Jengy_Test/","title":"Jengy Test","text":"<p>Lalalala (Testing Repo)</p>"},{"location":"wiki-test-notes/image/","title":"Image","text":""},{"location":"wiki-test-notes/plugin/","title":"Plugin","text":"<p>this is related https://github.com/swar8080/obsidian-plugin-update-tracker</p> <p>obsidian plugin</p>"},{"location":"wiki-test-notes/folder1/MultiMarkdown/","title":"MultiMarkdown","text":"<p>In order to create valid HTML, you need properly coded syntax that can be cumbersome for  \u201cnon-programmers\u201d to write. Sometimes, you just want to easily make certain words bold, and certain  words italicized without having to remember the  syntax. Additionally, for example, creating lists:</p> <ul> <li>should be easy</li> <li>should not involve programming</li> </ul> <p>MultiMarkdown</p>"},{"location":"wiki-test-notes/folder1/tags/","title":"Tags","text":"<p>above is mkdoc tags <pre><code>---\ntags:\n\n  - hashtag1\n  - hashtag2\n---\n</code></pre></p> <p>here is a obsidian tag</p> <p>hashtag1</p> <p><code>#hashtag1</code></p> <p>Following is a list of relevant tags: based on mkdoc tags tags.md (this page) is excluded from this list</p> <p>[TAGS]</p>","tags":["hashtag1","hashtag2"]},{"location":"wiki-test-notes/folder1/test1/","title":"Test1","text":"<p>test1b <code>[[test1b]]</code></p> <p>test1b <code>[test1b](test1b)</code></p> <p>test1c <code>[[test1c]]</code> broken link</p> <p>test2 <code>[[test2]]</code></p> <p>hashtag1</p> <p>wiki</p>  <p>Another edit here, testing live update roundtrip.  Does it support hashtag1?  </p>"},{"location":"wiki-test-notes/folder1/test1/#backlinks","title":"Backlinks","text":"<ul> <li>test2<ul> <li>test1</li> </ul> </li> </ul>"},{"location":"wiki-test-notes/folder1/test1b/","title":"Test1b","text":"<p>test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 </p> <p>test content 1 test content 1 </p> <p>test content 1 sdfvsd</p> <p>test content 1 </p> <p>hashtag</p>"},{"location":"wiki-test-notes/folder1/test1b/#backlinks","title":"Backlinks","text":"<ul> <li>test1<ul> <li>test1b <code>[[test1b]]</code></li> </ul> </li> </ul>"},{"location":"wiki-test-notes/folder1/test_tag/","title":"Test tag","text":"<p>This note was edited live on the wiki website.  It includes a link</p>","tags":["hashtag1","hashtag2"]},{"location":"wiki-test-notes/folder1/%F0%9F%94%90lock/","title":"\ud83d\udd10lock","text":""},{"location":"wiki-test-notes/folder1/%F0%9F%94%90lock/#test","title":"test","text":""},{"location":"wiki-test-notes/folder1/%F0%9F%94%90lock/#password-secret","title":"password: secret","text":""},{"location":"wiki-test-notes/folder22/test2/","title":"Test2","text":"<p>test1</p> <p>test edit from obsidian</p> <p>wiki</p> test collapse"},{"location":"wiki-test-notes/folder22/test2/#backlinks","title":"Backlinks","text":"<ul> <li>test1<ul> <li>test2 <code>[[test2]]</code></li> </ul> </li> </ul>"}]}